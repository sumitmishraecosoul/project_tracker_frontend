exports.id=122,exports.ids=[122],exports.modules={796:(e,t,r)=>{"use strict";r.d(t,{$:()=>s});let s={api:{development:process.env.NEXT_PUBLIC_API_URL||"http://localhost:5000",production:"https://project-tracker-backend-xi.vercel.app"},isDevelopment:!1,isProduction:!0,getApiUrl:()=>s.api.production,app:{name:"Project Tracker",version:process.env.npm_package_version||"1.0.0"},features:{enableDebugLogging:!1,enableAnalytics:!0}}},2366:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var s=r(7413);function a(){return(0,s.jsxs)("div",{className:"flex flex-col items-center justify-center h-screen text-center px-4",children:[(0,s.jsx)("h1",{className:"text-5xl md:text-5xl font-semibold text-gray-100",children:"404"}),(0,s.jsx)("h1",{className:"text-2xl md:text-3xl font-semibold mt-6",children:"This page has not been generated"}),(0,s.jsx)("p",{className:"mt-4 text-xl md:text-2xl text-gray-500",children:"Tell me what you would like on this page"})]})}},2704:()=>{},3966:(e,t,r)=>{"use strict";r.d(t,{K:()=>d});var s=r(796);let a=s.$.getApiUrl(),i=(...e)=>{s.$.features.enableDebugLogging&&console.log(...e)},o=(...e)=>{s.$.features.enableDebugLogging&&console.error(...e)};class n{getAuthHeader(){console.log("getAuthHeader");let e=localStorage.getItem("token")||"",t=e?e.startsWith("Bearer ")?e:`Bearer ${e}`:"";return{"Content-Type":"application/json",...t&&{Authorization:t}}}async handleResponse(e){if(i("API Response Status:",e.status),i("API Response OK:",e.ok),i("API Response Headers:",Object.fromEntries(e.headers.entries())),!e.ok){let t="API request failed";try{let r=await e.json();i("API Error Data:",r),t=r.message||r.error||r.msg||"API request failed"}catch(s){i("Failed to parse error response:",s);let r=await e.text();i("Raw error response:",r),t=r||"API request failed"}if(401===e.status||/token/i.test(t||""))try{localStorage.removeItem("token"),localStorage.removeItem("currentUser")}catch{}throw Error(t)}try{let t=await e.json();return i("API Success Response:",t),t}catch(e){throw i("Failed to parse success response:",e),Error("Failed to parse API response")}}async register(e){let t=await fetch(`${a}/api/auth/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return this.handleResponse(t)}async login(e){let t=await fetch(`${a}/api/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return this.handleResponse(t)}async getProfile(){let e=await fetch(`${a}/api/auth/profile`,{headers:this.getAuthHeader()});return this.handleResponse(e)}async updateProfile(e){let t=await fetch(`${a}/api/auth/profile`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(e)});return this.handleResponse(t)}async getUsers(){try{let e=await fetch(`${a}/api/users`,{headers:this.getAuthHeader()}),t=await this.handleResponse(e);return i("API Service - getUsers response:",t),Array.isArray(t)?t:[]}catch(e){throw o("API Service - getUsers error:",e),e}}async getUserById(e){let t=await fetch(`${a}/api/users/${e}`,{headers:this.getAuthHeader()});return this.handleResponse(t)}async getAssignableUsers(){let e=await fetch(`${a}/api/users/helpers/assignable-users`,{headers:this.getAuthHeader()});return this.handleResponse(e)}async getMyTeam(){let e=await fetch(`${a}/api/users/helpers/my-team`,{headers:this.getAuthHeader()});return this.handleResponse(e)}async getProjects(e){let t=new URLSearchParams;e&&Object.entries(e).forEach(([e,r])=>{void 0!==r&&t.append(e,r.toString())});let r=await fetch(`${a}/api/projects?${t.toString()}`,{headers:this.getAuthHeader()});return this.handleResponse(r)}async getProjectById(e){try{let t=`${a}/api/projects/${e}`,r=this.getAuthHeader();console.log("getProjectById - URL:",t),console.log("getProjectById - Headers:",r),console.log("getProjectById - Authorization header:",r.Authorization);let s=await fetch(t,{headers:r});if(console.log("getProjectById - Response status:",s.status),console.log("getProjectById - Response ok:",s.ok),!s.ok){let e=await s.text();throw console.error("getProjectById - Error response:",e),Error(`HTTP ${s.status}: ${e}`)}let i=await this.handleResponse(s);return console.log("getProjectById - Success result:",i),i}catch(e){throw console.error("getProjectById - Error:",e),e}}async createProject(e){let t=await fetch(`${a}/api/projects`,{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateProject(e,t){let r=await fetch(`${a}/api/projects/${e}`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(t)});return this.handleResponse(r)}async deleteProject(e){let t=await fetch(`${a}/api/projects/${e}`,{method:"DELETE",headers:this.getAuthHeader()});return this.handleResponse(t)}async getProjectTasks(e){let t=await fetch(`${a}/api/projects/${e}/tasks`,{headers:this.getAuthHeader()});return this.handleResponse(t)}async addTeamMember(e,t,r="member"){i("API Service - addTeamMember called with:",{projectId:e,userId:t,role:r}),i("API Service - URL:",`${a}/api/projects/${e}/team-members`),i("API Service - Headers:",this.getAuthHeader()),i("API Service - Request Body:",JSON.stringify({userId:t,role:r},null,2));try{let s=await fetch(`${a}/api/projects/${e}/team-members`,{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify({userId:t,role:r})});if(i("API Service - addTeamMember response status:",s.status),i("API Service - addTeamMember response ok:",s.ok),!s.ok){let e=await s.text();throw o("API Service - addTeamMember error response:",e),Error(`HTTP ${s.status}: ${e}`)}let n=await this.handleResponse(s);return i("API Service - addTeamMember success result:",n),n}catch(e){throw o("API Service - addTeamMember error:",e),e}}async removeTeamMember(e,t){i("API Service - removeTeamMember called with:",{projectId:e,userId:t}),i("API Service - URL:",`${a}/api/projects/${e}/team-members/${t}`),i("API Service - Headers:",this.getAuthHeader());try{let r=await fetch(`${a}/api/projects/${e}/team-members/${t}`,{method:"DELETE",headers:this.getAuthHeader()});if(i("API Service - removeTeamMember response status:",r.status),i("API Service - removeTeamMember response ok:",r.ok),!r.ok){let e=await r.text();throw o("API Service - removeTeamMember error response:",e),Error(`HTTP ${r.status}: ${e}`)}let s=await this.handleResponse(r);return i("API Service - removeTeamMember success result:",s),s}catch(e){throw o("API Service - removeTeamMember error:",e),e}}async updateTeamMemberRole(e,t,r){i("API Service - updateTeamMemberRole called with:",{projectId:e,userId:t,role:r}),i("API Service - URL:",`${a}/api/projects/${e}/team-members/${t}`),i("API Service - Headers:",this.getAuthHeader()),i("API Service - Request Body:",JSON.stringify({role:r},null,2));try{let s=await fetch(`${a}/api/projects/${e}/team-members/${t}`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify({role:r})});if(i("API Service - updateTeamMemberRole response status:",s.status),i("API Service - updateTeamMemberRole response ok:",s.ok),!s.ok){let e=await s.text();throw o("API Service - updateTeamMemberRole error response:",e),Error(`HTTP ${s.status}: ${e}`)}let n=await this.handleResponse(s);return i("API Service - updateTeamMemberRole success result:",n),n}catch(e){throw o("API Service - updateTeamMemberRole error:",e),e}}async bulkAddTeamMembers(e,t){i("API Service - bulkAddTeamMembers called with:",{projectId:e,teamMembers:t}),i("API Service - URL:",`${a}/api/projects/${e}/team-members/bulk`),i("API Service - Headers:",this.getAuthHeader()),i("API Service - Request Body:",JSON.stringify({teamMembers:t},null,2));try{let r=await fetch(`${a}/api/projects/${e}/team-members/bulk`,{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify({teamMembers:t})});if(i("API Service - bulkAddTeamMembers response status:",r.status),i("API Service - bulkAddTeamMembers response ok:",r.ok),!r.ok){let e=await r.text();throw o("API Service - bulkAddTeamMembers error response:",e),Error(`HTTP ${r.status}: ${e}`)}let s=await this.handleResponse(r);return i("API Service - bulkAddTeamMembers success result:",s),s}catch(e){throw o("API Service - bulkAddTeamMembers error:",e),e}}async addTeamMembersViaProjectUpdate(e,t){i("API Service - addTeamMembersViaProjectUpdate called with:",{projectId:e,userIds:t});try{let r=await this.getProjectById(e);i("API Service - Current project data:",r);let s=r.teamMembers||[];i("API Service - Current teamMembers:",s);let a=s.map(e=>{if(e&&"object"==typeof e){if(e.user&&e.user._id)return e.user._id;else if(e._id)return e._id}return null}).filter(e=>null!==e);i("API Service - Existing team member user IDs:",a);let o=[...new Set([...a,...t])];i("API Service - Updated user IDs:",o);let n=o.map(e=>({user:e,role:"member"})),d={...r,teamMembers:n};i("API Service - Update data:",d);let h=await this.updateProject(e,d);return i("API Service - Project update result:",h),h}catch(e){throw o("API Service - addTeamMembersViaProjectUpdate error:",e),e}}async removeTeamMemberViaProjectUpdate(e,t){i("API Service - removeTeamMemberViaProjectUpdate called with:",{projectId:e,userId:t});try{let r=await this.getProjectById(e);i("API Service - Current project data:",r);let s=r.teamMembers||[];i("API Service - Current teamMembers before removal:",s),i("API Service - Current teamMembers count before removal:",s.length),s.forEach((e,r)=>{let s="string"==typeof e.user?e.user:e.user._id;i(`API Service - Team member ${r}:`,{member:e,memberUserId:s,shouldRemove:s===t})});let a=s.filter(e=>{if(e&&"object"==typeof e&&e.user){let r="string"==typeof e.user?e.user:e.user._id,s=r!==t;return i(`API Service - Filtering team member: ${r} !== ${t} = ${s}`),s}return i("API Service - Keeping item (no user property):",e),!0});if(i("API Service - Updated teamMembers after removal:",a),i("API Service - Updated teamMembers count after removal:",a.length),i("API Service - Removed count:",s.length-a.length),s.length-a.length!=1)throw o("API Service - WARNING: Removed more than one team member!"),Error("Team member removal failed - removed more than one member");let n={...r,teamMembers:a};i("API Service - Update data:",n);let d=await this.updateProject(e,n);return i("API Service - Project update result:",d),d}catch(e){throw o("API Service - removeTeamMemberViaProjectUpdate error:",e),e}}async getTasks(e){try{let t=new URLSearchParams;e&&Object.entries(e).forEach(([e,r])=>{void 0!==r&&""!==r&&t.append(e,r)});let r=`${a}/api/tasks${t.toString()?`?${t.toString()}`:""}`,s=await fetch(r,{headers:this.getAuthHeader()}),o=await this.handleResponse(s);return i("API Service - getTasks response:",o),Array.isArray(o)?o:[]}catch(e){throw o("API Service - getTasks error:",e),e}}async getTasksByProject(e){try{let t=await fetch(`${a}/api/projects/${e}/tasks`,{headers:this.getAuthHeader()});return await this.handleResponse(t)}catch(e){throw o("Failed to fetch project tasks:",e),e}}async getTaskById(e){let t=await fetch(`${a}/api/tasks/${e}`,{headers:this.getAuthHeader()});return this.handleResponse(t)}async createTask(e){i("API Service - createTask called with:",e),i("API Service - URL:",`${a}/api/tasks`),i("API Service - Headers:",this.getAuthHeader()),i("API Service - Request Body:",JSON.stringify(e,null,2));try{let t=await fetch(`${a}/api/tasks`,{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify(e)});if(i("API Service - Response status:",t.status),i("API Service - Response ok:",t.ok),!t.ok){let e=await t.text();throw o("API Service - Error response body:",e),Error(`HTTP ${t.status}: ${e}`)}return this.handleResponse(t)}catch(e){throw o("API Service - Fetch error:",e),e}}async updateTask(e,t){i("API Service - updateTask called with ID:",e),i("API Service - updateTask data:",t),i("API Service - updateTask URL:",`${a}/api/tasks/${e}`);try{let r=await fetch(`${a}/api/tasks/${e}`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(t)});if(i("API Service - updateTask response status:",r.status),i("API Service - updateTask response ok:",r.ok),!r.ok){let e=await r.text();throw o("API Service - updateTask error response:",e),Error(`HTTP ${r.status}: ${e}`)}return this.handleResponse(r)}catch(e){throw o("API Service - updateTask error:",e),e}}async deleteTask(e){let t=await fetch(`${a}/api/tasks/${e}`,{method:"DELETE",headers:this.getAuthHeader()});return this.handleResponse(t)}async updateTaskStatus(e,t){let r=await fetch(`${a}/api/tasks/${e}/status`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify({status:t})});return this.handleResponse(r)}async assignTask(e,t){let r=await fetch(`${a}/api/tasks/${e}/assign`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify({assignedTo:t})});return this.handleResponse(r)}async getUserTasks(e){let t=new URLSearchParams;e&&Object.entries(e).forEach(([e,r])=>{void 0!==r&&t.append(e,r)});let r=await fetch(`${a}/api/user-tasks?${t.toString()}`,{headers:this.getAuthHeader()});return this.handleResponse(r)}async createUserTask(e){let t=await fetch(`${a}/api/user-tasks`,{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateUserTask(e,t){let r=await fetch(`${a}/api/user-tasks/${e}`,{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(t)});return this.handleResponse(r)}async deleteUserTask(e){let t=await fetch(`${a}/api/user-tasks/${e}`,{method:"DELETE",headers:this.getAuthHeader()});return this.handleResponse(t)}async getDashboardStats(){let e=await fetch(`${a}/api/dashboard`,{headers:this.getAuthHeader()});return this.handleResponse(e)}async getProjectsSummary(){let e=await fetch(`${a}/api/dashboard/projects-summary`,{headers:this.getAuthHeader()});return this.handleResponse(e)}async getTasksSummary(){let e=await fetch(`${a}/api/dashboard/tasks-summary`,{headers:this.getAuthHeader()});return this.handleResponse(e)}async getDashboardSummary(e){try{let t=new URLSearchParams;e?.department&&t.append("department",e.department);let r=`${a}/api/dashboard/summary${t.toString()?`?${t.toString()}`:""}`,s=await fetch(r,{headers:this.getAuthHeader()});return await this.handleResponse(s)}catch(e){throw o("Failed to fetch dashboard summary:",e),e}}async getDepartments(){try{let e=await fetch(`${a}/api/dashboard/departments`,{headers:this.getAuthHeader()}),t=await this.handleResponse(e);return Array.isArray(t)?t:[]}catch(e){return o("Failed to fetch departments:",e),[]}}}let d=new n},5268:(e,t,r)=>{Promise.resolve().then(r.t.bind(r,6444,23)),Promise.resolve().then(r.t.bind(r,6042,23)),Promise.resolve().then(r.t.bind(r,8170,23)),Promise.resolve().then(r.t.bind(r,9477,23)),Promise.resolve().then(r.t.bind(r,9345,23)),Promise.resolve().then(r.t.bind(r,2089,23)),Promise.resolve().then(r.t.bind(r,6577,23)),Promise.resolve().then(r.t.bind(r,1307,23))},6337:(e,t,r)=>{"use strict";r.d(t,{default:()=>s});let s=(0,r(2907).registerClientReference)(function(){throw Error("Attempted to call the default export of \"C:\\\\Users\\\\Sumit Mishra\\\\OneDrive - EcoSoul Home\\\\Documents\\\\Project trackerr\\\\Project tracker\\\\components\\\\BackendUrlDebug.tsx\" from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.")},"C:\\Users\\Sumit Mishra\\OneDrive - EcoSoul Home\\Documents\\Project trackerr\\Project tracker\\components\\BackendUrlDebug.tsx","default")},6487:()=>{},6799:(e,t,r)=>{Promise.resolve().then(r.t.bind(r,6346,23)),Promise.resolve().then(r.t.bind(r,7924,23)),Promise.resolve().then(r.t.bind(r,5656,23)),Promise.resolve().then(r.t.bind(r,99,23)),Promise.resolve().then(r.t.bind(r,8243,23)),Promise.resolve().then(r.t.bind(r,8827,23)),Promise.resolve().then(r.t.bind(r,2763,23)),Promise.resolve().then(r.t.bind(r,7173,23))},7648:(e,t,r)=>{Promise.resolve().then(r.bind(r,8635))},8014:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>m,metadata:()=>l});var s=r(7413),a=r(5508),i=r.n(a),o=r(260),n=r.n(o),d=r(3298),h=r.n(d);r(2704);var c=r(6337);let l={title:"Project Manager",description:"Project and Task Management System"};function m({children:e}){return(0,s.jsx)("html",{lang:"en",suppressHydrationWarning:!0,children:(0,s.jsxs)("body",{className:`${n().variable} ${h().variable} ${i().variable} antialiased`,children:[e,(0,s.jsx)(c.default,{})]})})}},8335:()=>{},8635:(e,t,r)=>{"use strict";r.d(t,{default:()=>i});var s=r(687),a=r(796);function i(){return a.$.features.enableDebugLogging?(0,s.jsxs)("div",{className:"fixed bottom-4 right-4 bg-blue-100 border border-blue-300 rounded-lg p-3 text-xs text-blue-800 max-w-xs z-50",children:[(0,s.jsx)("div",{className:"font-semibold mb-1",children:"\uD83D\uDD27 Backend URL Debug"}),(0,s.jsxs)("div",{className:"mb-1",children:[(0,s.jsx)("strong",{children:"Environment:"})," ","production"]}),(0,s.jsxs)("div",{className:"mb-1",children:[(0,s.jsx)("strong",{children:"API URL:"})," ",a.$.getApiUrl()]}),(0,s.jsx)("div",{className:"text-xs opacity-75",children:"This debug info only shows in development"})]}):null}},9504:(e,t,r)=>{Promise.resolve().then(r.bind(r,6337))}};