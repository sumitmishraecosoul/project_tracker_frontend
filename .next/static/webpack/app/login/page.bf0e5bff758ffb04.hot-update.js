"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\nconst API_BASE_URL = 'http://localhost:5000';\nclass ApiService {\n    getAuthHeader() {\n        const stored = localStorage.getItem('token') || '';\n        const authValue = stored ? stored.startsWith('Bearer ') ? stored : \"Bearer \".concat(stored) : '';\n        return {\n            'Content-Type': 'application/json',\n            ...authValue && {\n                'Authorization': authValue\n            }\n        };\n    }\n    async handleResponse(response) {\n        if (!response.ok) {\n            const error = await response.json().catch(()=>({\n                    message: 'API request failed'\n                }));\n            // If token invalid/expired, clear storage to force re-login\n            if (response.status === 401 || /token/i.test((error === null || error === void 0 ? void 0 : error.message) || '')) {\n                try {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('currentUser');\n                } catch (e) {}\n            }\n            throw new Error(error.message || 'API request failed');\n        }\n        return response.json();\n    }\n    withId(obj) {\n        if (!obj) return obj;\n        if (typeof obj.id === 'string') return obj;\n        if (typeof obj._id === 'string') {\n            return {\n                ...obj,\n                id: obj._id\n            };\n        }\n        if (typeof obj.userId === 'string') {\n            return {\n                ...obj,\n                id: obj.userId\n            };\n        }\n        if (typeof obj.projectId === 'string') {\n            return {\n                ...obj,\n                id: obj.projectId\n            };\n        }\n        if (typeof obj.taskId === 'string') {\n            return {\n                ...obj,\n                id: obj.taskId\n            };\n        }\n        var _obj_id, _ref;\n        return {\n            ...obj,\n            id: String((_ref = (_obj_id = obj.id) !== null && _obj_id !== void 0 ? _obj_id : obj._id) !== null && _ref !== void 0 ? _ref : '')\n        };\n    }\n    mapWithId(items) {\n        return (items || []).map((it)=>this.withId(it));\n    }\n    // Authentication APIs\n    async register(userData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        return this.handleResponse(response);\n    }\n    async login(credentials) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        return this.handleResponse(response);\n    }\n    async getProfile() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateProfile(data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(data)\n        });\n        return this.handleResponse(response);\n    }\n    // User APIs\n    async getUsers() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getUserById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Project APIs\n    async getProjects(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value.toString());\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        const json = await this.handleResponse(response);\n        return this.withId(json);\n    }\n    async createProject(projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateProject(id, projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteProject(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectTasks(projectId) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        const json = await this.handleResponse(response);\n        return this.mapWithId(json);\n    }\n    // Task APIs\n    async getTasks() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTaskById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createTask(taskData) {\n        console.log('API Service - createTask called with:', taskData);\n        console.log('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/tasks\"));\n        console.log('API Service - Headers:', this.getAuthHeader());\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        console.log('API Service - Response status:', response.status);\n        console.log('API Service - Response ok:', response.ok);\n        return this.handleResponse(response);\n    }\n    async updateTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateTaskStatus(id, status) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/status\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                status\n            })\n        });\n        return this.handleResponse(response);\n    }\n    async assignTask(id, assignedTo) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/assign\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                assignedTo\n            })\n        });\n        return this.handleResponse(response);\n    }\n    // User Task APIs\n    async getUserTasks(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value);\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createUserTask(taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateUserTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteUserTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Dashboard APIs\n    async getDashboardStats() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectsSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/projects-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTasksSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/tasks-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGktc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsZUFBZTtBQUVyQixNQUFNQztJQUNJQyxnQkFBZ0I7UUFDdEIsTUFBTUMsU0FBU0MsYUFBYUMsT0FBTyxDQUFDLFlBQVk7UUFDaEQsTUFBTUMsWUFBWUgsU0FDZEEsT0FBT0ksVUFBVSxDQUFDLGFBQWFKLFNBQVMsVUFBaUIsT0FBUEEsVUFDbEQ7UUFDSixPQUFPO1lBQ0wsZ0JBQWdCO1lBQ2hCLEdBQUlHLGFBQWE7Z0JBQUUsaUJBQWlCQTtZQUFVLENBQUM7UUFDakQ7SUFDRjtJQUVBLE1BQWNFLGVBQWVDLFFBQWtCLEVBQUU7UUFDL0MsSUFBSSxDQUFDQSxTQUFTQyxFQUFFLEVBQUU7WUFDaEIsTUFBTUMsUUFBUSxNQUFNRixTQUFTRyxJQUFJLEdBQUdDLEtBQUssQ0FBQyxJQUFPO29CQUFFQyxTQUFTO2dCQUFxQjtZQUNqRiw0REFBNEQ7WUFDNUQsSUFDRUwsU0FBU00sTUFBTSxLQUFLLE9BQ3BCLFNBQVNDLElBQUksQ0FBQ0wsQ0FBQUEsa0JBQUFBLDRCQUFBQSxNQUFPRyxPQUFPLEtBQUksS0FDaEM7Z0JBQ0EsSUFBSTtvQkFDRlYsYUFBYWEsVUFBVSxDQUFDO29CQUN4QmIsYUFBYWEsVUFBVSxDQUFDO2dCQUMxQixFQUFFLFVBQU0sQ0FBQztZQUNYO1lBQ0EsTUFBTSxJQUFJQyxNQUFNUCxNQUFNRyxPQUFPLElBQUk7UUFDbkM7UUFDQSxPQUFPTCxTQUFTRyxJQUFJO0lBQ3RCO0lBRVFPLE9BQXNDQyxHQUFNLEVBQXNCO1FBQ3hFLElBQUksQ0FBQ0EsS0FBSyxPQUFPQTtRQUNqQixJQUFJLE9BQU9BLElBQUlDLEVBQUUsS0FBSyxVQUFVLE9BQU9EO1FBQ3ZDLElBQUksT0FBT0EsSUFBSUUsR0FBRyxLQUFLLFVBQVU7WUFDL0IsT0FBTztnQkFBRSxHQUFHRixHQUFHO2dCQUFFQyxJQUFJRCxJQUFJRSxHQUFHO1lBQUM7UUFDL0I7UUFD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QUFTLENBQUM2QjtRQUN2QjtRQUNBLE9BQU8sSUFBSSxDQUFDM0QsY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU1xRSxlQUFlekQsRUFBVSxFQUFFO1FBQy9CLE1BQU1aLFdBQVcsTUFBTXdCLE1BQU0sR0FBa0NaLE9BQS9CckIsY0FBYSxvQkFBcUIsT0FBSHFCLEtBQU07WUFDbkVhLFFBQVE7WUFDUkMsU0FBUyxJQUFJLENBQUNqQyxhQUFhO1FBQzdCO1FBQ0EsT0FBTyxJQUFJLENBQUNNLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxpQkFBaUI7SUFDakIsTUFBTXNFLG9CQUFvQjtRQUN4QixNQUFNdEUsV0FBVyxNQUFNd0IsTUFBTSxHQUFnQixPQUFiakMsY0FBYSxtQkFBaUI7WUFDNURtQyxTQUFTLElBQUksQ0FBQ2pDLGFBQWE7UUFDN0I7UUFDQSxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU11RSxxQkFBcUI7UUFDekIsTUFBTXZFLFdBQVcsTUFBTXdCLE1BQU0sR0FBZ0IsT0FBYmpDLGNBQWEsb0NBQWtDO1lBQzdFbUMsU0FBUyxJQUFJLENBQUNqQyxhQUFhO1FBQzdCO1FBQ0EsT0FBTyxJQUFJLENBQUNNLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNd0Usa0JBQWtCO1FBQ3RCLE1BQU14RSxXQUFXLE1BQU13QixNQUFNLEdBQWdCLE9BQWJqQyxjQUFhLGlDQUErQjtZQUMxRW1DLFNBQVMsSUFBSSxDQUFDakMsYUFBYTtRQUM3QjtRQUNBLE9BQU8sSUFBSSxDQUFDTSxjQUFjLENBQUNDO0lBQzdCO0FBQ0Y7QUFFTyxNQUFNeUUsYUFBYSxJQUFJakYsYUFBYSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxTdW1pdCBNaXNocmFcXE9uZURyaXZlIC0gRWNvU291bCBIb21lXFxEb2N1bWVudHNcXFByb2plY3QgdHJhY2tlcnJcXFByb2plY3QgdHJhY2tlclxcbGliXFxhcGktc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBUElfQkFTRV9VUkwgPSAnaHR0cDovL2xvY2FsaG9zdDo1MDAwJztcblxuY2xhc3MgQXBpU2VydmljZSB7XG4gIHByaXZhdGUgZ2V0QXV0aEhlYWRlcigpIHtcbiAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSB8fCAnJztcbiAgICBjb25zdCBhdXRoVmFsdWUgPSBzdG9yZWRcbiAgICAgID8gc3RvcmVkLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSA/IHN0b3JlZCA6IGBCZWFyZXIgJHtzdG9yZWR9YFxuICAgICAgOiAnJztcbiAgICByZXR1cm4ge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIC4uLihhdXRoVmFsdWUgJiYgeyAnQXV0aG9yaXphdGlvbic6IGF1dGhWYWx1ZSB9KVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlOiBSZXNwb25zZSkge1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+ICh7IG1lc3NhZ2U6ICdBUEkgcmVxdWVzdCBmYWlsZWQnIH0pKTtcbiAgICAgIC8vIElmIHRva2VuIGludmFsaWQvZXhwaXJlZCwgY2xlYXIgc3RvcmFnZSB0byBmb3JjZSByZS1sb2dpblxuICAgICAgaWYgKFxuICAgICAgICByZXNwb25zZS5zdGF0dXMgPT09IDQwMSB8fFxuICAgICAgICAvdG9rZW4vaS50ZXN0KGVycm9yPy5tZXNzYWdlIHx8ICcnKVxuICAgICAgKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuJyk7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2N1cnJlbnRVc2VyJyk7XG4gICAgICAgIH0gY2F0Y2gge31cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvci5tZXNzYWdlIHx8ICdBUEkgcmVxdWVzdCBmYWlsZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuXG4gIHByaXZhdGUgd2l0aElkPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihvYmo6IFQpOiBUICYgeyBpZDogc3RyaW5nIH0ge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqIGFzIGFueTtcbiAgICBpZiAodHlwZW9mIG9iai5pZCA9PT0gJ3N0cmluZycpIHJldHVybiBvYmogYXMgYW55O1xuICAgIGlmICh0eXBlb2Ygb2JqLl9pZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7IC4uLm9iaiwgaWQ6IG9iai5faWQgfSBhcyBhbnk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKG9iaiBhcyBhbnkpLnVzZXJJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7IC4uLihvYmogYXMgYW55KSwgaWQ6IChvYmogYXMgYW55KS51c2VySWQgfSBhcyBhbnk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKG9iaiBhcyBhbnkpLnByb2plY3RJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7IC4uLihvYmogYXMgYW55KSwgaWQ6IChvYmogYXMgYW55KS5wcm9qZWN0SWQgfSBhcyBhbnk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKG9iaiBhcyBhbnkpLnRhc2tJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB7IC4uLihvYmogYXMgYW55KSwgaWQ6IChvYmogYXMgYW55KS50YXNrSWQgfSBhcyBhbnk7XG4gICAgfVxuICAgIHJldHVybiB7IC4uLm9iaiwgaWQ6IFN0cmluZyhvYmouaWQgPz8gb2JqLl9pZCA/PyAnJykgfSBhcyBhbnk7XG4gIH1cblxuICBwcml2YXRlIG1hcFdpdGhJZDxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4oaXRlbXM6IGFueVtdKTogKFQgJiB7IGlkOiBzdHJpbmcgfSlbXSB7XG4gICAgcmV0dXJuIChpdGVtcyB8fCBbXSkubWFwKChpdCkgPT4gdGhpcy53aXRoSWQ8VD4oaXQpKTtcbiAgfVxuXG4gIC8vIEF1dGhlbnRpY2F0aW9uIEFQSXNcbiAgYXN5bmMgcmVnaXN0ZXIodXNlckRhdGE6IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIHJvbGU6IHN0cmluZztcbiAgICBkZXBhcnRtZW50OiBzdHJpbmc7XG4gIH0pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL2F1dGgvcmVnaXN0ZXJgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlckRhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgbG9naW4oY3JlZGVudGlhbHM6IHsgZW1haWw6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9hdXRoL2xvZ2luYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxzKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFByb2ZpbGUoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9hdXRoL3Byb2ZpbGVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVByb2ZpbGUoZGF0YTogeyBuYW1lPzogc3RyaW5nOyBkZXBhcnRtZW50Pzogc3RyaW5nIH0pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL2F1dGgvcHJvZmlsZWAsIHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgLy8gVXNlciBBUElzXG4gIGFzeW5jIGdldFVzZXJzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlcnNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFVzZXJCeUlkKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3VzZXJzLyR7aWR9YCwge1xuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICAvLyBQcm9qZWN0IEFQSXNcbiAgYXN5bmMgZ2V0UHJvamVjdHMocGFyYW1zPzoge1xuICAgIHBhZ2U/OiBudW1iZXI7XG4gICAgbGltaXQ/OiBudW1iZXI7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICB9KSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHF1ZXJ5LmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgJHtBUElfQkFTRV9VUkx9L2FwaS9wcm9qZWN0cz8ke3F1ZXJ5LnRvU3RyaW5nKCl9YCxcbiAgICAgIHsgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCkgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UHJvamVjdEJ5SWQoaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtpZH1gLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICByZXR1cm4gdGhpcy53aXRoSWQoanNvbik7XG4gIH1cblxuICBhc3luYyBjcmVhdGVQcm9qZWN0KHByb2plY3REYXRhOiB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHN0YXR1czogc3RyaW5nO1xuICAgIHByaW9yaXR5OiBzdHJpbmc7XG4gICAgc3RhcnREYXRlOiBzdHJpbmc7XG4gICAgZHVlRGF0ZTogc3RyaW5nO1xuICAgIGFzc2lnbmVkVG8/OiBzdHJpbmdbXTtcbiAgfSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHNgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocHJvamVjdERhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlUHJvamVjdChpZDogc3RyaW5nLCBwcm9qZWN0RGF0YTogYW55KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9wcm9qZWN0cy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHByb2plY3REYXRhKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVByb2plY3QoaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyBnZXRQcm9qZWN0VGFza3MocHJvamVjdElkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfS90YXNrc2AsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIHJldHVybiB0aGlzLm1hcFdpdGhJZChqc29uKTtcbiAgfVxuXG4gIC8vIFRhc2sgQVBJc1xuICBhc3luYyBnZXRUYXNrcygpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Rhc2tzYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyBnZXRUYXNrQnlJZChpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlVGFzayh0YXNrRGF0YToge1xuICAgIHByb2plY3RJZDogc3RyaW5nO1xuICAgIHRhc2s6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICB0YXNrVHlwZTogc3RyaW5nO1xuICAgIHByaW9yaXR5OiBzdHJpbmc7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgYXNzaWduZWRUbzogc3RyaW5nO1xuICAgIHJlcG9ydGVyOiBzdHJpbmc7XG4gICAgc3RhcnREYXRlPzogc3RyaW5nO1xuICAgIGV0YTogc3RyaW5nO1xuICAgIGVzdGltYXRlZEhvdXJzPzogbnVtYmVyO1xuICAgIGFjdHVhbEhvdXJzPzogbnVtYmVyO1xuICAgIHJlbWFyaz86IHN0cmluZztcbiAgICByb2FkQmxvY2s/OiBzdHJpbmc7XG4gICAgc3VwcG9ydE5lZWRlZD86IHN0cmluZztcbiAgICBsYWJlbHM/OiBzdHJpbmdbXTtcbiAgICBhdHRhY2htZW50cz86IHN0cmluZ1tdO1xuICAgIHJlbGF0ZWRUYXNrcz86IHN0cmluZ1tdO1xuICAgIHBhcmVudFRhc2s/OiBzdHJpbmc7XG4gICAgc3ByaW50Pzogc3RyaW5nO1xuICB9KSB7XG4gICAgY29uc29sZS5sb2coJ0FQSSBTZXJ2aWNlIC0gY3JlYXRlVGFzayBjYWxsZWQgd2l0aDonLCB0YXNrRGF0YSk7XG4gICAgY29uc29sZS5sb2coJ0FQSSBTZXJ2aWNlIC0gVVJMOicsIGAke0FQSV9CQVNFX1VSTH0vYXBpL3Rhc2tzYCk7XG4gICAgY29uc29sZS5sb2coJ0FQSSBTZXJ2aWNlIC0gSGVhZGVyczonLCB0aGlzLmdldEF1dGhIZWFkZXIoKSk7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrc2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh0YXNrRGF0YSlcbiAgICB9KTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygnQVBJIFNlcnZpY2UgLSBSZXNwb25zZSBzdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICBjb25zb2xlLmxvZygnQVBJIFNlcnZpY2UgLSBSZXNwb25zZSBvazonLCByZXNwb25zZS5vayk7XG4gICAgXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlVGFzayhpZDogc3RyaW5nLCB0YXNrRGF0YTogYW55KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRhc2tEYXRhKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVRhc2soaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdGFza3MvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVUYXNrU3RhdHVzKGlkOiBzdHJpbmcsIHN0YXR1czogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfS9zdGF0dXNgLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHN0YXR1cyB9KVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGFzc2lnblRhc2soaWQ6IHN0cmluZywgYXNzaWduZWRUbzogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfS9hc3NpZ25gLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFzc2lnbmVkVG8gfSlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICAvLyBVc2VyIFRhc2sgQVBJc1xuICBhc3luYyBnZXRVc2VyVGFza3MocGFyYW1zPzoge1xuICAgIHVzZXJJZD86IHN0cmluZztcbiAgICBkYXRlPzogc3RyaW5nO1xuICAgIHR5cGVPZldvcms/OiBzdHJpbmc7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICB9KSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHF1ZXJ5LmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlci10YXNrcz8ke3F1ZXJ5LnRvU3RyaW5nKCl9YCxcbiAgICAgIHsgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCkgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlVXNlclRhc2sodGFza0RhdGE6IHtcbiAgICBkYXRlOiBzdHJpbmc7XG4gICAgdHlwZU9mV29yazogc3RyaW5nO1xuICAgIHdvcmtEZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHByb2plY3Q6IHN0cmluZztcbiAgICB0YXNrOiBzdHJpbmc7XG4gICAgZnJlcXVlbmN5OiBzdHJpbmc7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgaG91cnNTcGVudD86IG51bWJlcjtcbiAgICBub3Rlcz86IHN0cmluZztcbiAgfSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlci10YXNrc2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh0YXNrRGF0YSlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVVc2VyVGFzayhpZDogc3RyaW5nLCB0YXNrRGF0YTogYW55KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS91c2VyLXRhc2tzLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodGFza0RhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlVXNlclRhc2soaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlci10YXNrcy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIC8vIERhc2hib2FyZCBBUElzXG4gIGFzeW5jIGdldERhc2hib2FyZFN0YXRzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvZGFzaGJvYXJkYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyBnZXRQcm9qZWN0c1N1bW1hcnkoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9kYXNoYm9hcmQvcHJvamVjdHMtc3VtbWFyeWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0VGFza3NTdW1tYXJ5KCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvZGFzaGJvYXJkL3Rhc2tzLXN1bW1hcnlgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXBpU2VydmljZSA9IG5ldyBBcGlTZXJ2aWNlKCk7XG4iXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwiQXBpU2VydmljZSIsImdldEF1dGhIZWFkZXIiLCJzdG9yZWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiYXV0aFZhbHVlIiwic3RhcnRzV2l0aCIsImhhbmRsZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJvayIsImVycm9yIiwianNvbiIsImNhdGNoIiwibWVzc2FnZSIsInN0YXR1cyIsInRlc3QiLCJyZW1vdmVJdGVtIiwiRXJyb3IiLCJ3aXRoSWQiLCJvYmoiLCJpZCIsIl9pZCIsInVzZXJJZCIsInByb2plY3RJZCIsInRhc2tJZCIsIlN0cmluZyIsIm1hcFdpdGhJZCIsIml0ZW1zIiwibWFwIiwiaXQiLCJyZWdpc3RlciIsInVzZXJEYXRhIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJsb2dpbiIsImNyZWRlbnRpYWxzIiwiZ2V0UHJvZmlsZSIsInVwZGF0ZVByb2ZpbGUiLCJkYXRhIiwiZ2V0VXNlcnMiLCJnZXRVc2VyQnlJZCIsImdldFByb2plY3RzIiwicGFyYW1zIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwidW5kZWZpbmVkIiwiYXBwZW5kIiwidG9TdHJpbmciLCJnZXRQcm9qZWN0QnlJZCIsImNyZWF0ZVByb2plY3QiLCJwcm9qZWN0RGF0YSIsInVwZGF0ZVByb2plY3QiLCJkZWxldGVQcm9qZWN0IiwiZ2V0UHJvamVjdFRhc2tzIiwiZ2V0VGFza3MiLCJnZXRUYXNrQnlJZCIsImNyZWF0ZVRhc2siLCJ0YXNrRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVUYXNrIiwiZGVsZXRlVGFzayIsInVwZGF0ZVRhc2tTdGF0dXMiLCJhc3NpZ25UYXNrIiwiYXNzaWduZWRUbyIsImdldFVzZXJUYXNrcyIsImNyZWF0ZVVzZXJUYXNrIiwidXBkYXRlVXNlclRhc2siLCJkZWxldGVVc2VyVGFzayIsImdldERhc2hib2FyZFN0YXRzIiwiZ2V0UHJvamVjdHNTdW1tYXJ5IiwiZ2V0VGFza3NTdW1tYXJ5IiwiYXBpU2VydmljZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ })

});