"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';\n// Check if we're in development mode\nconst isDevelopment = \"development\" === 'development';\n// Helper function for development-only logging\nconst devLog = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    if (isDevelopment) {\n        console.log(...args);\n    }\n};\n// Helper function for development-only error logging\nconst devError = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    if (isDevelopment) {\n        console.error(...args);\n    }\n};\nclass ApiService {\n    getAuthHeader() {\n        console.log('getAuthHeader');\n        const stored = localStorage.getItem('token') || '';\n        const authValue = stored ? stored.startsWith('Bearer ') ? stored : \"Bearer \".concat(stored) : '';\n        return {\n            'Content-Type': 'application/json',\n            ...authValue && {\n                'Authorization': authValue\n            }\n        };\n    }\n    async handleResponse(response) {\n        devLog('API Response Status:', response.status);\n        devLog('API Response OK:', response.ok);\n        devLog('API Response Headers:', Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n            let errorMessage = 'API request failed';\n            try {\n                const errorData = await response.json();\n                devLog('API Error Data:', errorData);\n                errorMessage = errorData.message || errorData.error || errorData.msg || 'API request failed';\n            } catch (parseError) {\n                devLog('Failed to parse error response:', parseError);\n                const errorText = await response.text();\n                devLog('Raw error response:', errorText);\n                errorMessage = errorText || 'API request failed';\n            }\n            // If token invalid/expired, clear storage to force re-login\n            if (response.status === 401 || /token/i.test(errorMessage || '')) {\n                try {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('currentUser');\n                } catch (e) {}\n            }\n            throw new Error(errorMessage);\n        }\n        try {\n            const data = await response.json();\n            devLog('API Success Response:', data);\n            return data;\n        } catch (parseError) {\n            devLog('Failed to parse success response:', parseError);\n            throw new Error('Failed to parse API response');\n        }\n    }\n    // Authentication APIs\n    async register(userData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        return this.handleResponse(response);\n    }\n    async login(credentials) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        return this.handleResponse(response);\n    }\n    async getProfile() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateProfile(data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(data)\n        });\n        return this.handleResponse(response);\n    }\n    // User APIs\n    async getUsers() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users\"), {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            devLog('API Service - getUsers response:', data);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('API Service - getUsers error:', error);\n            throw error;\n        }\n    }\n    async getUserById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // New RBAC helper endpoints\n    async getAssignableUsers() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/helpers/assignable-users\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getMyTeam() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/helpers/my-team\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Project APIs\n    async getProjects(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value.toString());\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectById(id) {\n        try {\n            const url = \"\".concat(API_BASE_URL, \"/api/projects/\").concat(id);\n            const headers = this.getAuthHeader();\n            console.log('getProjectById - URL:', url);\n            console.log('getProjectById - Headers:', headers);\n            console.log('getProjectById - Authorization header:', headers.Authorization);\n            const response = await fetch(url, {\n                headers: headers\n            });\n            console.log('getProjectById - Response status:', response.status);\n            console.log('getProjectById - Response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('getProjectById - Error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            console.log('getProjectById - Success result:', result);\n            return result;\n        } catch (error) {\n            console.error('getProjectById - Error:', error);\n            throw error;\n        }\n    }\n    async createProject(projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateProject(id, projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteProject(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectTasks(projectId) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Team Member Management APIs\n    async addTeamMember(projectId, userId) {\n        let role = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'member';\n        devLog('API Service - addTeamMember called with:', {\n            projectId,\n            userId,\n            role\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            userId,\n            role\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    userId,\n                    role\n                })\n            });\n            devLog('API Service - addTeamMember response status:', response.status);\n            devLog('API Service - addTeamMember response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - addTeamMember error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - addTeamMember success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - addTeamMember error:', error);\n            throw error;\n        }\n    }\n    async removeTeamMember(projectId, userId) {\n        devLog('API Service - removeTeamMember called with:', {\n            projectId,\n            userId\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId), {\n                method: 'DELETE',\n                headers: this.getAuthHeader()\n            });\n            devLog('API Service - removeTeamMember response status:', response.status);\n            devLog('API Service - removeTeamMember response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - removeTeamMember error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - removeTeamMember success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - removeTeamMember error:', error);\n            throw error;\n        }\n    }\n    async updateTeamMemberRole(projectId, userId, role) {\n        devLog('API Service - updateTeamMemberRole called with:', {\n            projectId,\n            userId,\n            role\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            role\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId), {\n                method: 'PUT',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    role\n                })\n            });\n            devLog('API Service - updateTeamMemberRole response status:', response.status);\n            devLog('API Service - updateTeamMemberRole response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - updateTeamMemberRole error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - updateTeamMemberRole success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - updateTeamMemberRole error:', error);\n            throw error;\n        }\n    }\n    async bulkAddTeamMembers(projectId, teamMembers) {\n        devLog('API Service - bulkAddTeamMembers called with:', {\n            projectId,\n            teamMembers\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/bulk\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            teamMembers\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/bulk\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    teamMembers\n                })\n            });\n            devLog('API Service - bulkAddTeamMembers response status:', response.status);\n            devLog('API Service - bulkAddTeamMembers response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - bulkAddTeamMembers error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - bulkAddTeamMembers success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - bulkAddTeamMembers error:', error);\n            throw error;\n        }\n    }\n    // Fallback method using project update API\n    async addTeamMembersViaProjectUpdate(projectId, userIds) {\n        devLog('API Service - addTeamMembersViaProjectUpdate called with:', {\n            projectId,\n            userIds\n        });\n        try {\n            // First get the current project data\n            const currentProject = await this.getProjectById(projectId);\n            devLog('API Service - Current project data:', currentProject);\n            // Get current teamMembers array (not assignedTo)\n            const currentTeamMembers = currentProject.teamMembers || [];\n            devLog('API Service - Current teamMembers:', currentTeamMembers);\n            // Extract existing user IDs from teamMembers (handle both direct user objects and nested user objects)\n            const existingUserIds = currentTeamMembers.map((item)=>{\n                if (item && typeof item === 'object') {\n                    if (item.user && item.user._id) {\n                        return item.user._id; // Nested user object\n                    } else if (item._id) {\n                        return item._id; // Direct user object\n                    }\n                }\n                return null;\n            }).filter((id)=>id !== null);\n            devLog('API Service - Existing team member user IDs:', existingUserIds);\n            // Add new user IDs to the array (avoiding duplicates)\n            const updatedUserIds = [\n                ...new Set([\n                    ...existingUserIds,\n                    ...userIds\n                ])\n            ];\n            devLog('API Service - Updated user IDs:', updatedUserIds);\n            // Create teamMembers array with proper structure for backend\n            const updatedTeamMembers = updatedUserIds.map((userId)=>({\n                    user: userId,\n                    role: 'member' // default role\n                }));\n            // Update the project with new teamMembers array\n            const updateData = {\n                ...currentProject,\n                teamMembers: updatedTeamMembers\n            };\n            devLog('API Service - Update data:', updateData);\n            const result = await this.updateProject(projectId, updateData);\n            devLog('API Service - Project update result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - addTeamMembersViaProjectUpdate error:', error);\n            throw error;\n        }\n    }\n    async removeTeamMemberViaProjectUpdate(projectId, userId) {\n        devLog('API Service - removeTeamMemberViaProjectUpdate called with:', {\n            projectId,\n            userId\n        });\n        try {\n            // First get the current project data\n            const currentProject = await this.getProjectById(projectId);\n            devLog('API Service - Current project data:', currentProject);\n            // Get current teamMembers array (not assignedTo)\n            const currentTeamMembers = currentProject.teamMembers || [];\n            devLog('API Service - Current teamMembers before removal:', currentTeamMembers);\n            devLog('API Service - Current teamMembers count before removal:', currentTeamMembers.length);\n            // Log each team member for debugging\n            currentTeamMembers.forEach((member, index)=>{\n                const memberUserId = typeof member.user === 'string' ? member.user : member.user._id;\n                devLog(\"API Service - Team member \".concat(index, \":\"), {\n                    member,\n                    memberUserId,\n                    shouldRemove: memberUserId === userId\n                });\n            });\n            // Remove ONLY the specific user ID from the teamMembers array\n            const updatedTeamMembers = currentTeamMembers.filter((item)=>{\n                if (item && typeof item === 'object' && item.user) {\n                    const itemUserId = typeof item.user === 'string' ? item.user : item.user._id;\n                    const shouldKeep = itemUserId !== userId;\n                    devLog(\"API Service - Filtering team member: \".concat(itemUserId, \" !== \").concat(userId, \" = \").concat(shouldKeep));\n                    return shouldKeep;\n                }\n                devLog('API Service - Keeping item (no user property):', item);\n                return true;\n            });\n            devLog('API Service - Updated teamMembers after removal:', updatedTeamMembers);\n            devLog('API Service - Updated teamMembers count after removal:', updatedTeamMembers.length);\n            devLog('API Service - Removed count:', currentTeamMembers.length - updatedTeamMembers.length);\n            // Verify we only removed one member\n            if (currentTeamMembers.length - updatedTeamMembers.length !== 1) {\n                devError('API Service - WARNING: Removed more than one team member!');\n                throw new Error('Team member removal failed - removed more than one member');\n            }\n            // Update the project with new teamMembers array\n            const updateData = {\n                ...currentProject,\n                teamMembers: updatedTeamMembers\n            };\n            devLog('API Service - Update data:', updateData);\n            const result = await this.updateProject(projectId, updateData);\n            devLog('API Service - Project update result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - removeTeamMemberViaProjectUpdate error:', error);\n            throw error;\n        }\n    }\n    // Task APIs\n    async getTasks(params) {\n        try {\n            const query = new URLSearchParams();\n            if (params) {\n                Object.entries(params).forEach((param)=>{\n                    let [key, value] = param;\n                    if (value !== undefined && value !== '') query.append(key, value);\n                });\n            }\n            const url = \"\".concat(API_BASE_URL, \"/api/tasks\").concat(query.toString() ? \"?\".concat(query.toString()) : '');\n            const response = await fetch(url, {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            devLog('API Service - getTasks response:', data);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('API Service - getTasks error:', error);\n            throw error;\n        }\n    }\n    async getTasksByProject(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n                headers: this.getAuthHeader()\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            devError('Failed to fetch project tasks:', error);\n            throw error;\n        }\n    }\n    async getTaskById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createTask(taskData) {\n        devLog('API Service - createTask called with:', taskData);\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/tasks\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify(taskData, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            devLog('API Service - Response status:', response.status);\n            devLog('API Service - Response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - Error response body:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return this.handleResponse(response);\n        } catch (fetchError) {\n            devError('API Service - Fetch error:', fetchError);\n            throw fetchError;\n        }\n    }\n    async updateTask(id, taskData) {\n        devLog('API Service - updateTask called with ID:', id);\n        devLog('API Service - updateTask data:', taskData);\n        devLog('API Service - updateTask URL:', \"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n                method: 'PUT',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            devLog('API Service - updateTask response status:', response.status);\n            devLog('API Service - updateTask response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - updateTask error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return this.handleResponse(response);\n        } catch (error) {\n            devError('API Service - updateTask error:', error);\n            throw error;\n        }\n    }\n    async deleteTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateTaskStatus(id, status) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/status\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                status\n            })\n        });\n        return this.handleResponse(response);\n    }\n    async assignTask(id, assignedTo) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/assign\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                assignedTo\n            })\n        });\n        return this.handleResponse(response);\n    }\n    // User Task APIs\n    async getUserTasks(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value);\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createUserTask(taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateUserTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteUserTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Dashboard APIs\n    async getDashboardStats() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectsSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/projects-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTasksSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/tasks-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // New Dashboard Summary API - Single call for all dashboard data\n    async getDashboardSummary(params) {\n        try {\n            const query = new URLSearchParams();\n            if (params === null || params === void 0 ? void 0 : params.department) {\n                query.append('department', params.department);\n            }\n            const url = \"\".concat(API_BASE_URL, \"/api/dashboard/summary\").concat(query.toString() ? \"?\".concat(query.toString()) : '');\n            const response = await fetch(url, {\n                headers: this.getAuthHeader()\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            devError('Failed to fetch dashboard summary:', error);\n            throw error;\n        }\n    }\n    // Get available departments for admin users\n    async getDepartments() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/departments\"), {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('Failed to fetch departments:', error);\n            return [];\n        }\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGktc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLE1BQU1BLGVBQWVDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsbUJBQW1CLElBQUk7QUFFeEQscUNBQXFDO0FBQ3JDLE1BQU1DLGdCQUFnQkgsa0JBQXlCO0FBRS9DLCtDQUErQztBQUMvQyxNQUFNSSxTQUFTO3FDQUFJQztRQUFBQTs7SUFDakIsSUFBSUYsZUFBZTtRQUNqQkcsUUFBUUMsR0FBRyxJQUFJRjtJQUNqQjtBQUNGO0FBRUEscURBQXFEO0FBQ3JELE1BQU1HLFdBQVc7cUNBQUlIO1FBQUFBOztJQUNuQixJQUFJRixlQUFlO1FBQ2pCRyxRQUFRRyxLQUFLLElBQUlKO0lBQ25CO0FBQ0Y7QUE4Q0EsTUFBTUs7SUFDSUMsZ0JBQWdCO1FBQ3RCTCxRQUFRQyxHQUFHLENBQUM7UUFDWixNQUFNSyxTQUFTQyxhQUFhQyxPQUFPLENBQUMsWUFBWTtRQUNoRCxNQUFNQyxZQUFZSCxTQUNkQSxPQUFPSSxVQUFVLENBQUMsYUFBYUosU0FBUyxVQUFpQixPQUFQQSxVQUNsRDtRQUNKLE9BQU87WUFDTCxnQkFBZ0I7WUFDaEIsR0FBSUcsYUFBYTtnQkFBRSxpQkFBaUJBO1lBQVUsQ0FBQztRQUNqRDtJQUNGO0lBRUEsTUFBY0UsZUFBZUMsUUFBa0IsRUFBRTtRQUMvQ2QsT0FBTyx3QkFBd0JjLFNBQVNDLE1BQU07UUFDOUNmLE9BQU8sb0JBQW9CYyxTQUFTRSxFQUFFO1FBQ3RDaEIsT0FBTyx5QkFBeUJpQixPQUFPQyxXQUFXLENBQUNKLFNBQVNLLE9BQU8sQ0FBQ0MsT0FBTztRQUUzRSxJQUFJLENBQUNOLFNBQVNFLEVBQUUsRUFBRTtZQUNoQixJQUFJSyxlQUFlO1lBQ25CLElBQUk7Z0JBQ0YsTUFBTUMsWUFBWSxNQUFNUixTQUFTUyxJQUFJO2dCQUNyQ3ZCLE9BQU8sbUJBQW1Cc0I7Z0JBQzFCRCxlQUFlQyxVQUFVRSxPQUFPLElBQUlGLFVBQVVqQixLQUFLLElBQUlpQixVQUFVRyxHQUFHLElBQUk7WUFDMUUsRUFBRSxPQUFPQyxZQUFZO2dCQUNuQjFCLE9BQU8sbUNBQW1DMEI7Z0JBQzFDLE1BQU1DLFlBQVksTUFBTWIsU0FBU2MsSUFBSTtnQkFDckM1QixPQUFPLHVCQUF1QjJCO2dCQUM5Qk4sZUFBZU0sYUFBYTtZQUM5QjtZQUVBLDREQUE0RDtZQUM1RCxJQUNFYixTQUFTQyxNQUFNLEtBQUssT0FDcEIsU0FBU2MsSUFBSSxDQUFDUixnQkFBZ0IsS0FDOUI7Z0JBQ0EsSUFBSTtvQkFDRlosYUFBYXFCLFVBQVUsQ0FBQztvQkFDeEJyQixhQUFhcUIsVUFBVSxDQUFDO2dCQUMxQixFQUFFLFVBQU0sQ0FBQztZQUNYO1lBQ0EsTUFBTSxJQUFJQyxNQUFNVjtRQUNsQjtRQUVBLElBQUk7WUFDRixNQUFNVyxPQUFPLE1BQU1sQixTQUFTUyxJQUFJO1lBQ2hDdkIsT0FBTyx5QkFBeUJnQztZQUNoQyxPQUFPQTtRQUNULEVBQUUsT0FBT04sWUFBWTtZQUNuQjFCLE9BQU8scUNBQXFDMEI7WUFDNUMsTUFBTSxJQUFJSyxNQUFNO1FBQ2xCO0lBQ0Y7SUFFQSxzQkFBc0I7SUFDdEIsTUFBTUUsU0FBU0MsUUFPZCxFQUFFO1FBQ0QsTUFBTXBCLFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0IsT0FBYnhDLGNBQWEsdUJBQXFCO1lBQ2hFeUMsUUFBUTtZQUNSakIsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7WUFDOUNrQixNQUFNQyxLQUFLQyxTQUFTLENBQUNMO1FBQ3ZCO1FBQ0EsT0FBTyxJQUFJLENBQUNyQixjQUFjLENBQUNDO0lBQzdCO0lBRUEsTUFBTTBCLE1BQU1DLFdBQWdELEVBQUU7UUFDNUQsTUFBTTNCLFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0IsT0FBYnhDLGNBQWEsb0JBQWtCO1lBQzdEeUMsUUFBUTtZQUNSakIsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7WUFDOUNrQixNQUFNQyxLQUFLQyxTQUFTLENBQUNFO1FBQ3ZCO1FBQ0EsT0FBTyxJQUFJLENBQUM1QixjQUFjLENBQUNDO0lBQzdCO0lBRUEsTUFBTTRCLGFBQWE7UUFDakIsTUFBTTVCLFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0IsT0FBYnhDLGNBQWEsc0JBQW9CO1lBQy9Ed0IsU0FBUyxJQUFJLENBQUNaLGFBQWE7UUFDN0I7UUFDQSxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU02QixjQUFjWCxJQUE0QyxFQUFFO1FBQ2hFLE1BQU1sQixXQUFXLE1BQU1xQixNQUFNLEdBQWdCLE9BQWJ4QyxjQUFhLHNCQUFvQjtZQUMvRHlDLFFBQVE7WUFDUmpCLFNBQVMsSUFBSSxDQUFDWixhQUFhO1lBQzNCOEIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDUDtRQUN2QjtRQUNBLE9BQU8sSUFBSSxDQUFDbkIsY0FBYyxDQUFDQztJQUM3QjtJQUVBLFlBQVk7SUFDWixNQUFNOEIsV0FBNEI7UUFDaEMsSUFBSTtZQUNGLE1BQU05QixXQUFXLE1BQU1xQixNQUFNLEdBQWdCLE9BQWJ4QyxjQUFhLGVBQWE7Z0JBQ3hEd0IsU0FBUyxJQUFJLENBQUNaLGFBQWE7WUFDN0I7WUFDQSxNQUFNeUIsT0FBTyxNQUFNLElBQUksQ0FBQ25CLGNBQWMsQ0FBQ0M7WUFDdkNkLE9BQU8sb0NBQW9DZ0M7WUFDM0MsT0FBT2EsTUFBTUMsT0FBTyxDQUFDZCxRQUFRQSxPQUFPLEVBQUU7UUFDeEMsRUFBRSxPQUFPM0IsT0FBTztZQUNkRCxTQUFTLGlDQUFpQ0M7WUFDMUMsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBTTBDLFlBQVlDLEVBQVUsRUFBRTtRQUM1QixNQUFNbEMsV0FBVyxNQUFNcUIsTUFBTSxHQUE2QmEsT0FBMUJyRCxjQUFhLGVBQWdCLE9BQUhxRCxLQUFNO1lBQzlEN0IsU0FBUyxJQUFJLENBQUNaLGFBQWE7UUFDN0I7UUFDQSxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLDRCQUE0QjtJQUM1QixNQUFNbUMscUJBQXFCO1FBQ3pCLE1BQU1uQyxXQUFXLE1BQU1xQixNQUFNLEdBQWdCLE9BQWJ4QyxjQUFhLHdDQUFzQztZQUNqRndCLFNBQVMsSUFBSSxDQUFDWixhQUFhO1FBQzdCO1FBQ0EsT0FBTyxJQUFJLENBQUNNLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNb0MsWUFBWTtRQUNoQixNQUFNcEMsV0FBVyxNQUFNcUIsTUFBTSxHQUFnQixPQUFieEMsY0FBYSwrQkFBNkI7WUFDeEV3QixTQUFTLElBQUksQ0FBQ1osYUFBYTtRQUM3QjtRQUNBLE9BQU8sSUFBSSxDQUFDTSxjQUFjLENBQUNDO0lBQzdCO0lBRUEsZUFBZTtJQUNmLE1BQU1xQyxZQUFZQyxNQU9qQixFQUFFO1FBQ0QsTUFBTUMsUUFBUSxJQUFJQztRQUNsQixJQUFJRixRQUFRO1lBQ1ZuQyxPQUFPRyxPQUFPLENBQUNnQyxRQUFRRyxPQUFPLENBQUM7b0JBQUMsQ0FBQ0MsS0FBS0MsTUFBTTtnQkFDMUMsSUFBSUEsVUFBVUMsV0FBV0wsTUFBTU0sTUFBTSxDQUFDSCxLQUFLQyxNQUFNRyxRQUFRO1lBQzNEO1FBQ0Y7UUFFQSxNQUFNOUMsV0FBVyxNQUFNcUIsTUFDckIsR0FBZ0NrQixPQUE3QjFELGNBQWEsa0JBQWlDLE9BQWpCMEQsTUFBTU8sUUFBUSxLQUM5QztZQUFFekMsU0FBUyxJQUFJLENBQUNaLGFBQWE7UUFBRztRQUVsQyxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU0rQyxlQUFlYixFQUFVLEVBQUU7UUFDL0IsSUFBSTtZQUNGLE1BQU1jLE1BQU0sR0FBZ0NkLE9BQTdCckQsY0FBYSxrQkFBbUIsT0FBSHFEO1lBQzVDLE1BQU03QixVQUFVLElBQUksQ0FBQ1osYUFBYTtZQUVsQ0wsUUFBUUMsR0FBRyxDQUFDLHlCQUF5QjJEO1lBQ3JDNUQsUUFBUUMsR0FBRyxDQUFDLDZCQUE2QmdCO1lBQ3pDakIsUUFBUUMsR0FBRyxDQUFDLDBDQUEwQ2dCLFFBQVE0QyxhQUFhO1lBRTNFLE1BQU1qRCxXQUFXLE1BQU1xQixNQUFNMkIsS0FBSztnQkFDaEMzQyxTQUFTQTtZQUNYO1lBRUFqQixRQUFRQyxHQUFHLENBQUMscUNBQXFDVyxTQUFTQyxNQUFNO1lBQ2hFYixRQUFRQyxHQUFHLENBQUMsaUNBQWlDVyxTQUFTRSxFQUFFO1lBRXhELElBQUksQ0FBQ0YsU0FBU0UsRUFBRSxFQUFFO2dCQUNoQixNQUFNVyxZQUFZLE1BQU1iLFNBQVNjLElBQUk7Z0JBQ3JDMUIsUUFBUUcsS0FBSyxDQUFDLG9DQUFvQ3NCO2dCQUNsRCxNQUFNLElBQUlJLE1BQU0sUUFBNEJKLE9BQXBCYixTQUFTQyxNQUFNLEVBQUMsTUFBYyxPQUFWWTtZQUM5QztZQUVBLE1BQU1xQyxTQUFTLE1BQU0sSUFBSSxDQUFDbkQsY0FBYyxDQUFDQztZQUN6Q1osUUFBUUMsR0FBRyxDQUFDLG9DQUFvQzZEO1lBQ2hELE9BQU9BO1FBQ1QsRUFBRSxPQUFPM0QsT0FBTztZQUNkSCxRQUFRRyxLQUFLLENBQUMsMkJBQTJCQTtZQUN6QyxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSxNQUFNNEQsY0FBY0MsV0FZbkIsRUFBRTtRQUNELE1BQU1wRCxXQUFXLE1BQU1xQixNQUFNLEdBQWdCLE9BQWJ4QyxjQUFhLGtCQUFnQjtZQUMzRHlDLFFBQVE7WUFDUmpCLFNBQVMsSUFBSSxDQUFDWixhQUFhO1lBQzNCOEIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDMkI7UUFDdkI7UUFDQSxPQUFPLElBQUksQ0FBQ3JELGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNcUQsY0FBY25CLEVBQVUsRUFBRWtCLFdBWS9CLEVBQUU7UUFDRCxNQUFNcEQsV0FBVyxNQUFNcUIsTUFBTSxHQUFnQ2EsT0FBN0JyRCxjQUFhLGtCQUFtQixPQUFIcUQsS0FBTTtZQUNqRVosUUFBUTtZQUNSakIsU0FBUyxJQUFJLENBQUNaLGFBQWE7WUFDM0I4QixNQUFNQyxLQUFLQyxTQUFTLENBQUMyQjtRQUN2QjtRQUNBLE9BQU8sSUFBSSxDQUFDckQsY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU1zRCxjQUFjcEIsRUFBVSxFQUFFO1FBQzlCLE1BQU1sQyxXQUFXLE1BQU1xQixNQUFNLEdBQWdDYSxPQUE3QnJELGNBQWEsa0JBQW1CLE9BQUhxRCxLQUFNO1lBQ2pFWixRQUFRO1lBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtRQUM3QjtRQUNBLE9BQU8sSUFBSSxDQUFDTSxjQUFjLENBQUNDO0lBQzdCO0lBRUEsTUFBTXVELGdCQUFnQkMsU0FBaUIsRUFBRTtRQUN2QyxNQUFNeEQsV0FBVyxNQUFNcUIsTUFBTSxHQUFnQ21DLE9BQTdCM0UsY0FBYSxrQkFBMEIsT0FBVjJFLFdBQVUsV0FBUztZQUM5RW5ELFNBQVMsSUFBSSxDQUFDWixhQUFhO1FBQzdCO1FBQ0EsT0FBTyxJQUFJLENBQUNNLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSw4QkFBOEI7SUFDOUIsTUFBTXlELGNBQWNELFNBQWlCLEVBQUVFLE1BQWMsRUFBMkI7WUFBekJDLE9BQUFBLGlFQUFlO1FBQ3BFekUsT0FBTyw0Q0FBNEM7WUFBRXNFO1lBQVdFO1lBQVFDO1FBQUs7UUFDN0V6RSxPQUFPLHNCQUFzQixHQUFnQ3NFLE9BQTdCM0UsY0FBYSxrQkFBMEIsT0FBVjJFLFdBQVU7UUFDdkV0RSxPQUFPLDBCQUEwQixJQUFJLENBQUNPLGFBQWE7UUFDbkRQLE9BQU8sK0JBQStCc0MsS0FBS0MsU0FBUyxDQUFDO1lBQUVpQztZQUFRQztRQUFLLEdBQUcsTUFBTTtRQUU3RSxJQUFJO1lBQ0YsTUFBTTNELFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0NtQyxPQUE3QjNFLGNBQWEsa0JBQTBCLE9BQVYyRSxXQUFVLGtCQUFnQjtnQkFDckZsQyxRQUFRO2dCQUNSakIsU0FBUyxJQUFJLENBQUNaLGFBQWE7Z0JBQzNCOEIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO29CQUFFaUM7b0JBQVFDO2dCQUFLO1lBQ3RDO1lBRUF6RSxPQUFPLGdEQUFnRGMsU0FBU0MsTUFBTTtZQUN0RWYsT0FBTyw0Q0FBNENjLFNBQVNFLEVBQUU7WUFFOUQsSUFBSSxDQUFDRixTQUFTRSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU1XLFlBQVksTUFBTWIsU0FBU2MsSUFBSTtnQkFDckN4QixTQUFTLCtDQUErQ3VCO2dCQUN4RCxNQUFNLElBQUlJLE1BQU0sUUFBNEJKLE9BQXBCYixTQUFTQyxNQUFNLEVBQUMsTUFBYyxPQUFWWTtZQUM5QztZQUVBLE1BQU1xQyxTQUFTLE1BQU0sSUFBSSxDQUFDbkQsY0FBYyxDQUFDQztZQUN6Q2QsT0FBTywrQ0FBK0NnRTtZQUN0RCxPQUFPQTtRQUNULEVBQUUsT0FBTzNELE9BQU87WUFDZEQsU0FBUyxzQ0FBc0NDO1lBQy9DLE1BQU1BO1FBQ1I7SUFDRjtJQUVBLE1BQU1xRSxpQkFBaUJKLFNBQWlCLEVBQUVFLE1BQWMsRUFBRTtRQUN4RHhFLE9BQU8sK0NBQStDO1lBQUVzRTtZQUFXRTtRQUFPO1FBQzFFeEUsT0FBTyxzQkFBc0IsR0FBZ0NzRSxPQUE3QjNFLGNBQWEsa0JBQTBDNkUsT0FBMUJGLFdBQVUsa0JBQXVCLE9BQVBFO1FBQ3ZGeEUsT0FBTywwQkFBMEIsSUFBSSxDQUFDTyxhQUFhO1FBRW5ELElBQUk7WUFDRixNQUFNTyxXQUFXLE1BQU1xQixNQUFNLEdBQWdDbUMsT0FBN0IzRSxjQUFhLGtCQUEwQzZFLE9BQTFCRixXQUFVLGtCQUF1QixPQUFQRSxTQUFVO2dCQUMvRnBDLFFBQVE7Z0JBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtZQUM3QjtZQUVBUCxPQUFPLG1EQUFtRGMsU0FBU0MsTUFBTTtZQUN6RWYsT0FBTywrQ0FBK0NjLFNBQVNFLEVBQUU7WUFFakUsSUFBSSxDQUFDRixTQUFTRSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU1XLFlBQVksTUFBTWIsU0FBU2MsSUFBSTtnQkFDckN4QixTQUFTLGtEQUFrRHVCO2dCQUMzRCxNQUFNLElBQUlJLE1BQU0sUUFBNEJKLE9BQXBCYixTQUFTQyxNQUFNLEVBQUMsTUFBYyxPQUFWWTtZQUM5QztZQUVBLE1BQU1xQyxTQUFTLE1BQU0sSUFBSSxDQUFDbkQsY0FBYyxDQUFDQztZQUN6Q2QsT0FBTyxrREFBa0RnRTtZQUN6RCxPQUFPQTtRQUNULEVBQUUsT0FBTzNELE9BQU87WUFDZEQsU0FBUyx5Q0FBeUNDO1lBQ2xELE1BQU1BO1FBQ1I7SUFDRjtJQUVBLE1BQU1zRSxxQkFBcUJMLFNBQWlCLEVBQUVFLE1BQWMsRUFBRUMsSUFBWSxFQUFFO1FBQzFFekUsT0FBTyxtREFBbUQ7WUFBRXNFO1lBQVdFO1lBQVFDO1FBQUs7UUFDcEZ6RSxPQUFPLHNCQUFzQixHQUFnQ3NFLE9BQTdCM0UsY0FBYSxrQkFBMEM2RSxPQUExQkYsV0FBVSxrQkFBdUIsT0FBUEU7UUFDdkZ4RSxPQUFPLDBCQUEwQixJQUFJLENBQUNPLGFBQWE7UUFDbkRQLE9BQU8sK0JBQStCc0MsS0FBS0MsU0FBUyxDQUFDO1lBQUVrQztRQUFLLEdBQUcsTUFBTTtRQUVyRSxJQUFJO1lBQ0YsTUFBTTNELFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0NtQyxPQUE3QjNFLGNBQWEsa0JBQTBDNkUsT0FBMUJGLFdBQVUsa0JBQXVCLE9BQVBFLFNBQVU7Z0JBQy9GcEMsUUFBUTtnQkFDUmpCLFNBQVMsSUFBSSxDQUFDWixhQUFhO2dCQUMzQjhCLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztvQkFBRWtDO2dCQUFLO1lBQzlCO1lBRUF6RSxPQUFPLHVEQUF1RGMsU0FBU0MsTUFBTTtZQUM3RWYsT0FBTyxtREFBbURjLFNBQVNFLEVBQUU7WUFFckUsSUFBSSxDQUFDRixTQUFTRSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU1XLFlBQVksTUFBTWIsU0FBU2MsSUFBSTtnQkFDckN4QixTQUFTLHNEQUFzRHVCO2dCQUMvRCxNQUFNLElBQUlJLE1BQU0sUUFBNEJKLE9BQXBCYixTQUFTQyxNQUFNLEVBQUMsTUFBYyxPQUFWWTtZQUM5QztZQUVBLE1BQU1xQyxTQUFTLE1BQU0sSUFBSSxDQUFDbkQsY0FBYyxDQUFDQztZQUN6Q2QsT0FBTyxzREFBc0RnRTtZQUM3RCxPQUFPQTtRQUNULEVBQUUsT0FBTzNELE9BQU87WUFDZEQsU0FBUyw2Q0FBNkNDO1lBQ3RELE1BQU1BO1FBQ1I7SUFDRjtJQUVBLE1BQU11RSxtQkFBbUJOLFNBQWlCLEVBQUVPLFdBQXFELEVBQUU7UUFDakc3RSxPQUFPLGlEQUFpRDtZQUFFc0U7WUFBV087UUFBWTtRQUNqRjdFLE9BQU8sc0JBQXNCLEdBQWdDc0UsT0FBN0IzRSxjQUFhLGtCQUEwQixPQUFWMkUsV0FBVTtRQUN2RXRFLE9BQU8sMEJBQTBCLElBQUksQ0FBQ08sYUFBYTtRQUNuRFAsT0FBTywrQkFBK0JzQyxLQUFLQyxTQUFTLENBQUM7WUFBRXNDO1FBQVksR0FBRyxNQUFNO1FBRTVFLElBQUk7WUFDRixNQUFNL0QsV0FBVyxNQUFNcUIsTUFBTSxHQUFnQ21DLE9BQTdCM0UsY0FBYSxrQkFBMEIsT0FBVjJFLFdBQVUsdUJBQXFCO2dCQUMxRmxDLFFBQVE7Z0JBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtnQkFDM0I4QixNQUFNQyxLQUFLQyxTQUFTLENBQUM7b0JBQUVzQztnQkFBWTtZQUNyQztZQUVBN0UsT0FBTyxxREFBcURjLFNBQVNDLE1BQU07WUFDM0VmLE9BQU8saURBQWlEYyxTQUFTRSxFQUFFO1lBRW5FLElBQUksQ0FBQ0YsU0FBU0UsRUFBRSxFQUFFO2dCQUNoQixNQUFNVyxZQUFZLE1BQU1iLFNBQVNjLElBQUk7Z0JBQ3JDeEIsU0FBUyxvREFBb0R1QjtnQkFDN0QsTUFBTSxJQUFJSSxNQUFNLFFBQTRCSixPQUFwQmIsU0FBU0MsTUFBTSxFQUFDLE1BQWMsT0FBVlk7WUFDOUM7WUFFQSxNQUFNcUMsU0FBUyxNQUFNLElBQUksQ0FBQ25ELGNBQWMsQ0FBQ0M7WUFDekNkLE9BQU8sb0RBQW9EZ0U7WUFDM0QsT0FBT0E7UUFDVCxFQUFFLE9BQU8zRCxPQUFPO1lBQ2RELFNBQVMsMkNBQTJDQztZQUNwRCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSwyQ0FBMkM7SUFDM0MsTUFBTXlFLCtCQUErQlIsU0FBaUIsRUFBRVMsT0FBaUIsRUFBRTtRQUN6RS9FLE9BQU8sNkRBQTZEO1lBQUVzRTtZQUFXUztRQUFRO1FBRXpGLElBQUk7WUFDRixxQ0FBcUM7WUFDckMsTUFBTUMsaUJBQWlCLE1BQU0sSUFBSSxDQUFDbkIsY0FBYyxDQUFDUztZQUNqRHRFLE9BQU8sdUNBQXVDZ0Y7WUFFOUMsaURBQWlEO1lBQ2pELE1BQU1DLHFCQUFxQkQsZUFBZUgsV0FBVyxJQUFJLEVBQUU7WUFDM0Q3RSxPQUFPLHNDQUFzQ2lGO1lBRTdDLHVHQUF1RztZQUN2RyxNQUFNQyxrQkFBa0JELG1CQUFtQkUsR0FBRyxDQUFDLENBQUNDO2dCQUM5QyxJQUFJQSxRQUFRLE9BQU9BLFNBQVMsVUFBVTtvQkFDcEMsSUFBSUEsS0FBS0MsSUFBSSxJQUFJRCxLQUFLQyxJQUFJLENBQUNDLEdBQUcsRUFBRTt3QkFDOUIsT0FBT0YsS0FBS0MsSUFBSSxDQUFDQyxHQUFHLEVBQUUscUJBQXFCO29CQUM3QyxPQUFPLElBQUlGLEtBQUtFLEdBQUcsRUFBRTt3QkFDbkIsT0FBT0YsS0FBS0UsR0FBRyxFQUFFLHFCQUFxQjtvQkFDeEM7Z0JBQ0Y7Z0JBQ0EsT0FBTztZQUNULEdBQUdDLE1BQU0sQ0FBQyxDQUFDdkMsS0FBc0JBLE9BQU87WUFFeENoRCxPQUFPLGdEQUFnRGtGO1lBRXZELHNEQUFzRDtZQUN0RCxNQUFNTSxpQkFBaUI7bUJBQUksSUFBSUMsSUFBSTt1QkFBSVA7dUJBQW9CSDtpQkFBUTthQUFFO1lBQ3JFL0UsT0FBTyxtQ0FBbUN3RjtZQUUxQyw2REFBNkQ7WUFDN0QsTUFBTUUscUJBQXFCRixlQUFlTCxHQUFHLENBQUNYLENBQUFBLFNBQVc7b0JBQ3ZEYSxNQUFNYjtvQkFDTkMsTUFBTSxTQUFTLGVBQWU7Z0JBQ2hDO1lBRUEsZ0RBQWdEO1lBQ2hELE1BQU1rQixhQUFhO2dCQUNqQixHQUFHWCxjQUFjO2dCQUNqQkgsYUFBYWE7WUFDZjtZQUVBMUYsT0FBTyw4QkFBOEIyRjtZQUVyQyxNQUFNM0IsU0FBUyxNQUFNLElBQUksQ0FBQ0csYUFBYSxDQUFDRyxXQUFXcUI7WUFDbkQzRixPQUFPLHdDQUF3Q2dFO1lBQy9DLE9BQU9BO1FBQ1QsRUFBRSxPQUFPM0QsT0FBTztZQUNkRCxTQUFTLHVEQUF1REM7WUFDaEUsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBTXVGLGlDQUFpQ3RCLFNBQWlCLEVBQUVFLE1BQWMsRUFBRTtRQUN4RXhFLE9BQU8sK0RBQStEO1lBQUVzRTtZQUFXRTtRQUFPO1FBRTFGLElBQUk7WUFDRixxQ0FBcUM7WUFDckMsTUFBTVEsaUJBQWlCLE1BQU0sSUFBSSxDQUFDbkIsY0FBYyxDQUFDUztZQUNqRHRFLE9BQU8sdUNBQXVDZ0Y7WUFFOUMsaURBQWlEO1lBQ2pELE1BQU1DLHFCQUFxQkQsZUFBZUgsV0FBVyxJQUFJLEVBQUU7WUFDM0Q3RSxPQUFPLHFEQUFxRGlGO1lBQzVEakYsT0FBTywyREFBMkRpRixtQkFBbUJZLE1BQU07WUFFM0YscUNBQXFDO1lBQ3JDWixtQkFBbUIxQixPQUFPLENBQUMsQ0FBQ3VDLFFBQWFDO2dCQUN2QyxNQUFNQyxlQUFlLE9BQU9GLE9BQU9ULElBQUksS0FBSyxXQUFXUyxPQUFPVCxJQUFJLEdBQUdTLE9BQU9ULElBQUksQ0FBQ0MsR0FBRztnQkFDcEZ0RixPQUFPLDZCQUFtQyxPQUFOK0YsT0FBTSxNQUFJO29CQUM1Q0Q7b0JBQ0FFO29CQUNBQyxjQUFjRCxpQkFBaUJ4QjtnQkFDakM7WUFDRjtZQUVBLDhEQUE4RDtZQUM5RCxNQUFNa0IscUJBQXFCVCxtQkFBbUJNLE1BQU0sQ0FBQyxDQUFDSDtnQkFDcEQsSUFBSUEsUUFBUSxPQUFPQSxTQUFTLFlBQVlBLEtBQUtDLElBQUksRUFBRTtvQkFDakQsTUFBTWEsYUFBYSxPQUFPZCxLQUFLQyxJQUFJLEtBQUssV0FBV0QsS0FBS0MsSUFBSSxHQUFHRCxLQUFLQyxJQUFJLENBQUNDLEdBQUc7b0JBQzVFLE1BQU1hLGFBQWFELGVBQWUxQjtvQkFDbEN4RSxPQUFPLHdDQUEwRHdFLE9BQWxCMEIsWUFBVyxTQUFtQkMsT0FBWjNCLFFBQU8sT0FBZ0IsT0FBWDJCO29CQUM3RSxPQUFPQTtnQkFDVDtnQkFDQW5HLE9BQU8sa0RBQWtEb0Y7Z0JBQ3pELE9BQU87WUFDVDtZQUVBcEYsT0FBTyxvREFBb0QwRjtZQUMzRDFGLE9BQU8sMERBQTBEMEYsbUJBQW1CRyxNQUFNO1lBQzFGN0YsT0FBTyxnQ0FBZ0NpRixtQkFBbUJZLE1BQU0sR0FBR0gsbUJBQW1CRyxNQUFNO1lBRTVGLG9DQUFvQztZQUNwQyxJQUFJWixtQkFBbUJZLE1BQU0sR0FBR0gsbUJBQW1CRyxNQUFNLEtBQUssR0FBRztnQkFDL0R6RixTQUFTO2dCQUNULE1BQU0sSUFBSTJCLE1BQU07WUFDbEI7WUFFQSxnREFBZ0Q7WUFDaEQsTUFBTTRELGFBQWE7Z0JBQ2pCLEdBQUdYLGNBQWM7Z0JBQ2pCSCxhQUFhYTtZQUNmO1lBRUExRixPQUFPLDhCQUE4QjJGO1lBRXJDLE1BQU0zQixTQUFTLE1BQU0sSUFBSSxDQUFDRyxhQUFhLENBQUNHLFdBQVdxQjtZQUNuRDNGLE9BQU8sd0NBQXdDZ0U7WUFDL0MsT0FBT0E7UUFDVCxFQUFFLE9BQU8zRCxPQUFPO1lBQ2RELFNBQVMseURBQXlEQztZQUNsRSxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSxZQUFZO0lBQ1osTUFBTStGLFNBQVNoRCxNQUE0SCxFQUFtQjtRQUM1SixJQUFJO1lBQ0YsTUFBTUMsUUFBUSxJQUFJQztZQUNsQixJQUFJRixRQUFRO2dCQUNWbkMsT0FBT0csT0FBTyxDQUFDZ0MsUUFBUUcsT0FBTyxDQUFDO3dCQUFDLENBQUNDLEtBQUtDLE1BQU07b0JBQzFDLElBQUlBLFVBQVVDLGFBQWFELFVBQVUsSUFBSUosTUFBTU0sTUFBTSxDQUFDSCxLQUFLQztnQkFDN0Q7WUFDRjtZQUNBLE1BQU1LLE1BQU0sR0FBNEJULE9BQXpCMUQsY0FBYSxjQUEyRCxPQUEvQzBELE1BQU1PLFFBQVEsS0FBSyxJQUFxQixPQUFqQlAsTUFBTU8sUUFBUSxNQUFPO1lBQ3BGLE1BQU05QyxXQUFXLE1BQU1xQixNQUFNMkIsS0FBSztnQkFDaEMzQyxTQUFTLElBQUksQ0FBQ1osYUFBYTtZQUM3QjtZQUNBLE1BQU15QixPQUFPLE1BQU0sSUFBSSxDQUFDbkIsY0FBYyxDQUFDQztZQUN2Q2QsT0FBTyxvQ0FBb0NnQztZQUMzQyxPQUFPYSxNQUFNQyxPQUFPLENBQUNkLFFBQVFBLE9BQU8sRUFBRTtRQUN4QyxFQUFFLE9BQU8zQixPQUFPO1lBQ2RELFNBQVMsaUNBQWlDQztZQUMxQyxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSxNQUFNZ0csa0JBQWtCL0IsU0FBaUIsRUFBRTtRQUN6QyxJQUFJO1lBQ0YsTUFBTXhELFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0NtQyxPQUE3QjNFLGNBQWEsa0JBQTBCLE9BQVYyRSxXQUFVLFdBQVM7Z0JBQzlFbkQsU0FBUyxJQUFJLENBQUNaLGFBQWE7WUFDN0I7WUFDQSxPQUFPLE1BQU0sSUFBSSxDQUFDTSxjQUFjLENBQUNDO1FBQ25DLEVBQUUsT0FBT1QsT0FBTztZQUNkRCxTQUFTLGtDQUFrQ0M7WUFDM0MsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBTWlHLFlBQVl0RCxFQUFVLEVBQUU7UUFDNUIsTUFBTWxDLFdBQVcsTUFBTXFCLE1BQU0sR0FBNkJhLE9BQTFCckQsY0FBYSxlQUFnQixPQUFIcUQsS0FBTTtZQUM5RDdCLFNBQVMsSUFBSSxDQUFDWixhQUFhO1FBQzdCO1FBQ0EsT0FBTyxJQUFJLENBQUNNLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNeUYsV0FBV0MsUUFxQmhCLEVBQUU7UUFDRHhHLE9BQU8seUNBQXlDd0c7UUFDaER4RyxPQUFPLHNCQUFzQixHQUFnQixPQUFiTCxjQUFhO1FBQzdDSyxPQUFPLDBCQUEwQixJQUFJLENBQUNPLGFBQWE7UUFDbkRQLE9BQU8sK0JBQStCc0MsS0FBS0MsU0FBUyxDQUFDaUUsVUFBVSxNQUFNO1FBRXJFLElBQUk7WUFDRixNQUFNMUYsV0FBVyxNQUFNcUIsTUFBTSxHQUFnQixPQUFieEMsY0FBYSxlQUFhO2dCQUN4RHlDLFFBQVE7Z0JBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtnQkFDM0I4QixNQUFNQyxLQUFLQyxTQUFTLENBQUNpRTtZQUN2QjtZQUVBeEcsT0FBTyxrQ0FBa0NjLFNBQVNDLE1BQU07WUFDeERmLE9BQU8sOEJBQThCYyxTQUFTRSxFQUFFO1lBRWhELElBQUksQ0FBQ0YsU0FBU0UsRUFBRSxFQUFFO2dCQUNoQixNQUFNVyxZQUFZLE1BQU1iLFNBQVNjLElBQUk7Z0JBQ3JDeEIsU0FBUyxzQ0FBc0N1QjtnQkFDL0MsTUFBTSxJQUFJSSxNQUFNLFFBQTRCSixPQUFwQmIsU0FBU0MsTUFBTSxFQUFDLE1BQWMsT0FBVlk7WUFDOUM7WUFFQSxPQUFPLElBQUksQ0FBQ2QsY0FBYyxDQUFDQztRQUM3QixFQUFFLE9BQU8yRixZQUFZO1lBQ25CckcsU0FBUyw4QkFBOEJxRztZQUN2QyxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSxNQUFNQyxXQUFXMUQsRUFBVSxFQUFFd0QsUUFBYSxFQUFFO1FBQzFDeEcsT0FBTyw0Q0FBNENnRDtRQUNuRGhELE9BQU8sa0NBQWtDd0c7UUFDekN4RyxPQUFPLGlDQUFpQyxHQUE2QmdELE9BQTFCckQsY0FBYSxlQUFnQixPQUFIcUQ7UUFFckUsSUFBSTtZQUNGLE1BQU1sQyxXQUFXLE1BQU1xQixNQUFNLEdBQTZCYSxPQUExQnJELGNBQWEsZUFBZ0IsT0FBSHFELEtBQU07Z0JBQzlEWixRQUFRO2dCQUNSakIsU0FBUyxJQUFJLENBQUNaLGFBQWE7Z0JBQzNCOEIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDaUU7WUFDdkI7WUFFQXhHLE9BQU8sNkNBQTZDYyxTQUFTQyxNQUFNO1lBQ25FZixPQUFPLHlDQUF5Q2MsU0FBU0UsRUFBRTtZQUUzRCxJQUFJLENBQUNGLFNBQVNFLEVBQUUsRUFBRTtnQkFDaEIsTUFBTVcsWUFBWSxNQUFNYixTQUFTYyxJQUFJO2dCQUNyQ3hCLFNBQVMsNENBQTRDdUI7Z0JBQ3JELE1BQU0sSUFBSUksTUFBTSxRQUE0QkosT0FBcEJiLFNBQVNDLE1BQU0sRUFBQyxNQUFjLE9BQVZZO1lBQzlDO1lBRUEsT0FBTyxJQUFJLENBQUNkLGNBQWMsQ0FBQ0M7UUFDN0IsRUFBRSxPQUFPVCxPQUFPO1lBQ2RELFNBQVMsbUNBQW1DQztZQUM1QyxNQUFNQTtRQUNSO0lBQ0Y7SUFFQSxNQUFNc0csV0FBVzNELEVBQVUsRUFBRTtRQUMzQixNQUFNbEMsV0FBVyxNQUFNcUIsTUFBTSxHQUE2QmEsT0FBMUJyRCxjQUFhLGVBQWdCLE9BQUhxRCxLQUFNO1lBQzlEWixRQUFRO1lBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtRQUM3QjtRQUNBLE9BQU8sSUFBSSxDQUFDTSxjQUFjLENBQUNDO0lBQzdCO0lBRUEsTUFBTThGLGlCQUFpQjVELEVBQVUsRUFBRWpDLE1BQWMsRUFBRTtRQUNqRCxNQUFNRCxXQUFXLE1BQU1xQixNQUFNLEdBQTZCYSxPQUExQnJELGNBQWEsZUFBZ0IsT0FBSHFELElBQUcsWUFBVTtZQUNyRVosUUFBUTtZQUNSakIsU0FBUyxJQUFJLENBQUNaLGFBQWE7WUFDM0I4QixNQUFNQyxLQUFLQyxTQUFTLENBQUM7Z0JBQUV4QjtZQUFPO1FBQ2hDO1FBQ0EsT0FBTyxJQUFJLENBQUNGLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNK0YsV0FBVzdELEVBQVUsRUFBRThELFVBQWtCLEVBQUU7UUFDL0MsTUFBTWhHLFdBQVcsTUFBTXFCLE1BQU0sR0FBNkJhLE9BQTFCckQsY0FBYSxlQUFnQixPQUFIcUQsSUFBRyxZQUFVO1lBQ3JFWixRQUFRO1lBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtZQUMzQjhCLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFBRXVFO1lBQVc7UUFDcEM7UUFDQSxPQUFPLElBQUksQ0FBQ2pHLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxpQkFBaUI7SUFDakIsTUFBTWlHLGFBQWEzRCxNQUtsQixFQUFFO1FBQ0QsTUFBTUMsUUFBUSxJQUFJQztRQUNsQixJQUFJRixRQUFRO1lBQ1ZuQyxPQUFPRyxPQUFPLENBQUNnQyxRQUFRRyxPQUFPLENBQUM7b0JBQUMsQ0FBQ0MsS0FBS0MsTUFBTTtnQkFDMUMsSUFBSUEsVUFBVUMsV0FBV0wsTUFBTU0sTUFBTSxDQUFDSCxLQUFLQztZQUM3QztRQUNGO1FBRUEsTUFBTTNDLFdBQVcsTUFBTXFCLE1BQ3JCLEdBQWtDa0IsT0FBL0IxRCxjQUFhLG9CQUFtQyxPQUFqQjBELE1BQU1PLFFBQVEsS0FDaEQ7WUFBRXpDLFNBQVMsSUFBSSxDQUFDWixhQUFhO1FBQUc7UUFFbEMsT0FBTyxJQUFJLENBQUNNLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNa0csZUFBZVIsUUFVcEIsRUFBRTtRQUNELE1BQU0xRixXQUFXLE1BQU1xQixNQUFNLEdBQWdCLE9BQWJ4QyxjQUFhLG9CQUFrQjtZQUM3RHlDLFFBQVE7WUFDUmpCLFNBQVMsSUFBSSxDQUFDWixhQUFhO1lBQzNCOEIsTUFBTUMsS0FBS0MsU0FBUyxDQUFDaUU7UUFDdkI7UUFDQSxPQUFPLElBQUksQ0FBQzNGLGNBQWMsQ0FBQ0M7SUFDN0I7SUFFQSxNQUFNbUcsZUFBZWpFLEVBQVUsRUFBRXdELFFBQWEsRUFBRTtRQUM5QyxNQUFNMUYsV0FBVyxNQUFNcUIsTUFBTSxHQUFrQ2EsT0FBL0JyRCxjQUFhLG9CQUFxQixPQUFIcUQsS0FBTTtZQUNuRVosUUFBUTtZQUNSakIsU0FBUyxJQUFJLENBQUNaLGFBQWE7WUFDM0I4QixNQUFNQyxLQUFLQyxTQUFTLENBQUNpRTtRQUN2QjtRQUNBLE9BQU8sSUFBSSxDQUFDM0YsY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU1vRyxlQUFlbEUsRUFBVSxFQUFFO1FBQy9CLE1BQU1sQyxXQUFXLE1BQU1xQixNQUFNLEdBQWtDYSxPQUEvQnJELGNBQWEsb0JBQXFCLE9BQUhxRCxLQUFNO1lBQ25FWixRQUFRO1lBQ1JqQixTQUFTLElBQUksQ0FBQ1osYUFBYTtRQUM3QjtRQUNBLE9BQU8sSUFBSSxDQUFDTSxjQUFjLENBQUNDO0lBQzdCO0lBRUEsaUJBQWlCO0lBQ2pCLE1BQU1xRyxvQkFBb0I7UUFDeEIsTUFBTXJHLFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0IsT0FBYnhDLGNBQWEsbUJBQWlCO1lBQzVEd0IsU0FBUyxJQUFJLENBQUNaLGFBQWE7UUFDN0I7UUFDQSxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU1zRyxxQkFBcUI7UUFDekIsTUFBTXRHLFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0IsT0FBYnhDLGNBQWEsb0NBQWtDO1lBQzdFd0IsU0FBUyxJQUFJLENBQUNaLGFBQWE7UUFDN0I7UUFDQSxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLE1BQU11RyxrQkFBa0I7UUFDdEIsTUFBTXZHLFdBQVcsTUFBTXFCLE1BQU0sR0FBZ0IsT0FBYnhDLGNBQWEsaUNBQStCO1lBQzFFd0IsU0FBUyxJQUFJLENBQUNaLGFBQWE7UUFDN0I7UUFDQSxPQUFPLElBQUksQ0FBQ00sY0FBYyxDQUFDQztJQUM3QjtJQUVBLGlFQUFpRTtJQUNqRSxNQUFNd0csb0JBQW9CbEUsTUFBZ0MsRUFBRTtRQUMxRCxJQUFJO1lBQ0YsTUFBTUMsUUFBUSxJQUFJQztZQUNsQixJQUFJRixtQkFBQUEsNkJBQUFBLE9BQVFtRSxVQUFVLEVBQUU7Z0JBQ3RCbEUsTUFBTU0sTUFBTSxDQUFDLGNBQWNQLE9BQU9tRSxVQUFVO1lBQzlDO1lBRUEsTUFBTXpELE1BQU0sR0FBd0NULE9BQXJDMUQsY0FBYSwwQkFBdUUsT0FBL0MwRCxNQUFNTyxRQUFRLEtBQUssSUFBcUIsT0FBakJQLE1BQU1PLFFBQVEsTUFBTztZQUVoRyxNQUFNOUMsV0FBVyxNQUFNcUIsTUFBTTJCLEtBQUs7Z0JBQ2hDM0MsU0FBUyxJQUFJLENBQUNaLGFBQWE7WUFDN0I7WUFDQSxPQUFPLE1BQU0sSUFBSSxDQUFDTSxjQUFjLENBQUNDO1FBQ25DLEVBQUUsT0FBT1QsT0FBTztZQUNkRCxTQUFTLHNDQUFzQ0M7WUFDL0MsTUFBTUE7UUFDUjtJQUNGO0lBRUEsNENBQTRDO0lBQzVDLE1BQU1tSCxpQkFBb0M7UUFDeEMsSUFBSTtZQUNGLE1BQU0xRyxXQUFXLE1BQU1xQixNQUFNLEdBQWdCLE9BQWJ4QyxjQUFhLCtCQUE2QjtnQkFDeEV3QixTQUFTLElBQUksQ0FBQ1osYUFBYTtZQUM3QjtZQUNBLE1BQU15QixPQUFPLE1BQU0sSUFBSSxDQUFDbkIsY0FBYyxDQUFDQztZQUN2QyxPQUFPK0IsTUFBTUMsT0FBTyxDQUFDZCxRQUFRQSxPQUFPLEVBQUU7UUFDeEMsRUFBRSxPQUFPM0IsT0FBTztZQUNkRCxTQUFTLGdDQUFnQ0M7WUFDekMsT0FBTyxFQUFFO1FBQ1g7SUFDRjtBQUNGO0FBRU8sTUFBTW9ILGFBQWEsSUFBSW5ILGFBQWEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcU3VtaXQgTWlzaHJhXFxPbmVEcml2ZSAtIEVjb1NvdWwgSG9tZVxcRG9jdW1lbnRzXFxQcm9qZWN0IHRyYWNrZXJyXFxQcm9qZWN0IHRyYWNrZXJcXGxpYlxcYXBpLXNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQVBJX0JBU0VfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDo1MDAwJztcblxuLy8gQ2hlY2sgaWYgd2UncmUgaW4gZGV2ZWxvcG1lbnQgbW9kZVxuY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGRldmVsb3BtZW50LW9ubHkgbG9nZ2luZ1xuY29uc3QgZGV2TG9nID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gIGlmIChpc0RldmVsb3BtZW50KSB7XG4gICAgY29uc29sZS5sb2coLi4uYXJncyk7XG4gIH1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiBmb3IgZGV2ZWxvcG1lbnQtb25seSBlcnJvciBsb2dnaW5nXG5jb25zdCBkZXZFcnJvciA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICBpZiAoaXNEZXZlbG9wbWVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gIH1cbn07XG5cbmludGVyZmFjZSBVc2VyIHtcbiAgX2lkOiBzdHJpbmc7XG4gIGlkPzogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIHJvbGU6IHN0cmluZztcbiAgZGVwYXJ0bWVudDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVGFzayB7XG4gIF9pZDogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xuICBwcm9qZWN0SWQ6IHN0cmluZztcbiAgdGFzazogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgdGFza1R5cGU/OiBzdHJpbmc7XG4gIHByaW9yaXR5OiBzdHJpbmc7XG4gIHN0YXR1czogc3RyaW5nO1xuICBhc3NpZ25lZFRvOiB7XG4gICAgX2lkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gIH07XG4gIHJlcG9ydGVyOiB7XG4gICAgX2lkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gIH07XG4gIHN0YXJ0RGF0ZT86IHN0cmluZztcbiAgZXRhOiBzdHJpbmc7XG4gIGVzdGltYXRlZEhvdXJzPzogbnVtYmVyO1xuICBhY3R1YWxIb3Vycz86IG51bWJlcjtcbiAgcmVtYXJrPzogc3RyaW5nO1xuICByb2FkQmxvY2s/OiBzdHJpbmc7XG4gIHN1cHBvcnROZWVkZWQ/OiBzdHJpbmc7XG4gIGxhYmVscz86IHN0cmluZ1tdO1xuICBhdHRhY2htZW50cz86IHN0cmluZ1tdO1xuICByZWxhdGVkVGFza3M/OiBzdHJpbmdbXTtcbiAgcGFyZW50VGFzaz86IHN0cmluZztcbiAgc3ByaW50Pzogc3RyaW5nO1xuICBjcmVhdGVkQXQ6IHN0cmluZztcbiAgdXBkYXRlZEF0OiBzdHJpbmc7XG59XG5cbmNsYXNzIEFwaVNlcnZpY2Uge1xuICBwcml2YXRlIGdldEF1dGhIZWFkZXIoKSB7XG4gICAgY29uc29sZS5sb2coJ2dldEF1dGhIZWFkZXInKTtcbiAgICBjb25zdCBzdG9yZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSB8fCAnJztcbiAgICBjb25zdCBhdXRoVmFsdWUgPSBzdG9yZWRcbiAgICAgID8gc3RvcmVkLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSA/IHN0b3JlZCA6IGBCZWFyZXIgJHtzdG9yZWR9YFxuICAgICAgOiAnJztcbiAgICByZXR1cm4ge1xuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIC4uLihhdXRoVmFsdWUgJiYgeyAnQXV0aG9yaXphdGlvbic6IGF1dGhWYWx1ZSB9KVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlOiBSZXNwb25zZSkge1xuICAgIGRldkxvZygnQVBJIFJlc3BvbnNlIFN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgIGRldkxvZygnQVBJIFJlc3BvbnNlIE9LOicsIHJlc3BvbnNlLm9rKTtcbiAgICBkZXZMb2coJ0FQSSBSZXNwb25zZSBIZWFkZXJzOicsIE9iamVjdC5mcm9tRW50cmllcyhyZXNwb25zZS5oZWFkZXJzLmVudHJpZXMoKSkpO1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnQVBJIHJlcXVlc3QgZmFpbGVkJztcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgZGV2TG9nKCdBUEkgRXJyb3IgRGF0YTonLCBlcnJvckRhdGEpO1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvckRhdGEubWVzc2FnZSB8fCBlcnJvckRhdGEuZXJyb3IgfHwgZXJyb3JEYXRhLm1zZyB8fCAnQVBJIHJlcXVlc3QgZmFpbGVkJztcbiAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgZGV2TG9nKCdGYWlsZWQgdG8gcGFyc2UgZXJyb3IgcmVzcG9uc2U6JywgcGFyc2VFcnJvcik7XG4gICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgZGV2TG9nKCdSYXcgZXJyb3IgcmVzcG9uc2U6JywgZXJyb3JUZXh0KTtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JUZXh0IHx8ICdBUEkgcmVxdWVzdCBmYWlsZWQnO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiB0b2tlbiBpbnZhbGlkL2V4cGlyZWQsIGNsZWFyIHN0b3JhZ2UgdG8gZm9yY2UgcmUtbG9naW5cbiAgICAgIGlmIChcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgfHxcbiAgICAgICAgL3Rva2VuL2kudGVzdChlcnJvck1lc3NhZ2UgfHwgJycpXG4gICAgICApIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY3VycmVudFVzZXInKTtcbiAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgfVxuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgZGV2TG9nKCdBUEkgU3VjY2VzcyBSZXNwb25zZTonLCBkYXRhKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIGRldkxvZygnRmFpbGVkIHRvIHBhcnNlIHN1Y2Nlc3MgcmVzcG9uc2U6JywgcGFyc2VFcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBBUEkgcmVzcG9uc2UnKTtcbiAgICB9XG4gIH1cblxuICAvLyBBdXRoZW50aWNhdGlvbiBBUElzXG4gIGFzeW5jIHJlZ2lzdGVyKHVzZXJEYXRhOiB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICByb2xlOiBzdHJpbmc7XG4gICAgZGVwYXJ0bWVudDogc3RyaW5nO1xuICAgIG1hbmFnZXI/OiBzdHJpbmc7XG4gIH0pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL2F1dGgvcmVnaXN0ZXJgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlckRhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgbG9naW4oY3JlZGVudGlhbHM6IHsgZW1haWw6IHN0cmluZzsgcGFzc3dvcmQ6IHN0cmluZyB9KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9hdXRoL2xvZ2luYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxzKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFByb2ZpbGUoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9hdXRoL3Byb2ZpbGVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVByb2ZpbGUoZGF0YTogeyBuYW1lPzogc3RyaW5nOyBkZXBhcnRtZW50Pzogc3RyaW5nIH0pIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL2F1dGgvcHJvZmlsZWAsIHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgLy8gVXNlciBBUElzXG4gIGFzeW5jIGdldFVzZXJzKCk6IFByb21pc2U8VXNlcltdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlcnNgLCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBnZXRVc2VycyByZXNwb25zZTonLCBkYXRhKTtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGEpID8gZGF0YSA6IFtdO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSBnZXRVc2VycyBlcnJvcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRVc2VyQnlJZChpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS91c2Vycy8ke2lkfWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgLy8gTmV3IFJCQUMgaGVscGVyIGVuZHBvaW50c1xuICBhc3luYyBnZXRBc3NpZ25hYmxlVXNlcnMoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS91c2Vycy9oZWxwZXJzL2Fzc2lnbmFibGUtdXNlcnNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldE15VGVhbSgpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3VzZXJzL2hlbHBlcnMvbXktdGVhbWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgLy8gUHJvamVjdCBBUElzXG4gIGFzeW5jIGdldFByb2plY3RzKHBhcmFtcz86IHtcbiAgICBwYWdlPzogbnVtYmVyO1xuICAgIGxpbWl0PzogbnVtYmVyO1xuICAgIHN0YXR1cz86IHN0cmluZztcbiAgICBwcmlvcml0eT86IHN0cmluZztcbiAgICBzZWFyY2g/OiBzdHJpbmc7XG4gICAgZGVwYXJ0bWVudD86IHN0cmluZztcbiAgfSkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGlmIChwYXJhbXMpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBxdWVyeS5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHM/JHtxdWVyeS50b1N0cmluZygpfWAsXG4gICAgICB7IGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpIH1cbiAgICApO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFByb2plY3RCeUlkKGlkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtpZH1gO1xuICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuZ2V0QXV0aEhlYWRlcigpO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnZ2V0UHJvamVjdEJ5SWQgLSBVUkw6JywgdXJsKTtcbiAgICAgIGNvbnNvbGUubG9nKCdnZXRQcm9qZWN0QnlJZCAtIEhlYWRlcnM6JywgaGVhZGVycyk7XG4gICAgICBjb25zb2xlLmxvZygnZ2V0UHJvamVjdEJ5SWQgLSBBdXRob3JpemF0aW9uIGhlYWRlcjonLCBoZWFkZXJzLkF1dGhvcml6YXRpb24pO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ2dldFByb2plY3RCeUlkIC0gUmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICBjb25zb2xlLmxvZygnZ2V0UHJvamVjdEJ5SWQgLSBSZXNwb25zZSBvazonLCByZXNwb25zZS5vayk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdnZXRQcm9qZWN0QnlJZCAtIEVycm9yIHJlc3BvbnNlOicsIGVycm9yVGV4dCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIGNvbnNvbGUubG9nKCdnZXRQcm9qZWN0QnlJZCAtIFN1Y2Nlc3MgcmVzdWx0OicsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdnZXRQcm9qZWN0QnlJZCAtIEVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVByb2plY3QocHJvamVjdERhdGE6IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgcHJpb3JpdHk6IHN0cmluZztcbiAgICBzdGFydERhdGU6IHN0cmluZztcbiAgICBkdWVEYXRlOiBzdHJpbmc7XG4gICAgYXNzaWduZWRUbz86IHN0cmluZ1tdO1xuICAgIHRlYW1NZW1iZXJzPzogQXJyYXk8e1xuICAgICAgdXNlcjogc3RyaW5nO1xuICAgICAgcm9sZTogc3RyaW5nO1xuICAgIH0+O1xuICB9KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9wcm9qZWN0c2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwcm9qZWN0RGF0YSlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVQcm9qZWN0KGlkOiBzdHJpbmcsIHByb2plY3REYXRhOiB7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICAgIHByaW9yaXR5Pzogc3RyaW5nO1xuICAgIHN0YXJ0RGF0ZT86IHN0cmluZztcbiAgICBkdWVEYXRlPzogc3RyaW5nO1xuICAgIGFzc2lnbmVkVG8/OiBzdHJpbmdbXTtcbiAgICB0ZWFtTWVtYmVycz86IEFycmF5PHtcbiAgICAgIHVzZXI6IHN0cmluZztcbiAgICAgIHJvbGU6IHN0cmluZztcbiAgICB9PjtcbiAgfSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwcm9qZWN0RGF0YSlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyBkZWxldGVQcm9qZWN0KGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Byb2plY3RzLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UHJvamVjdFRhc2tzKHByb2plY3RJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9wcm9qZWN0cy8ke3Byb2plY3RJZH0vdGFza3NgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIC8vIFRlYW0gTWVtYmVyIE1hbmFnZW1lbnQgQVBJc1xuICBhc3luYyBhZGRUZWFtTWVtYmVyKHByb2plY3RJZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZywgcm9sZTogc3RyaW5nID0gJ21lbWJlcicpIHtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gYWRkVGVhbU1lbWJlciBjYWxsZWQgd2l0aDonLCB7IHByb2plY3RJZCwgdXNlcklkLCByb2xlIH0pO1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBVUkw6JywgYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9L3RlYW0tbWVtYmVyc2ApO1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBIZWFkZXJzOicsIHRoaXMuZ2V0QXV0aEhlYWRlcigpKTtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gUmVxdWVzdCBCb2R5OicsIEpTT04uc3RyaW5naWZ5KHsgdXNlcklkLCByb2xlIH0sIG51bGwsIDIpKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9wcm9qZWN0cy8ke3Byb2plY3RJZH0vdGVhbS1tZW1iZXJzYCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdXNlcklkLCByb2xlIH0pXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIGFkZFRlYW1NZW1iZXIgcmVzcG9uc2Ugc3RhdHVzOicsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gYWRkVGVhbU1lbWJlciByZXNwb25zZSBvazonLCByZXNwb25zZS5vayk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSBhZGRUZWFtTWVtYmVyIGVycm9yIHJlc3BvbnNlOicsIGVycm9yVGV4dCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBhZGRUZWFtTWVtYmVyIHN1Y2Nlc3MgcmVzdWx0OicsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSBhZGRUZWFtTWVtYmVyIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZVRlYW1NZW1iZXIocHJvamVjdElkOiBzdHJpbmcsIHVzZXJJZDogc3RyaW5nKSB7XG4gICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIHJlbW92ZVRlYW1NZW1iZXIgY2FsbGVkIHdpdGg6JywgeyBwcm9qZWN0SWQsIHVzZXJJZCB9KTtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gVVJMOicsIGAke0FQSV9CQVNFX1VSTH0vYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfS90ZWFtLW1lbWJlcnMvJHt1c2VySWR9YCk7XG4gICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIEhlYWRlcnM6JywgdGhpcy5nZXRBdXRoSGVhZGVyKCkpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfS90ZWFtLW1lbWJlcnMvJHt1c2VySWR9YCwge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSByZW1vdmVUZWFtTWVtYmVyIHJlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIHJlbW92ZVRlYW1NZW1iZXIgcmVzcG9uc2Ugb2s6JywgcmVzcG9uc2Uub2spO1xuICAgICAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gcmVtb3ZlVGVhbU1lbWJlciBlcnJvciByZXNwb25zZTonLCBlcnJvclRleHQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke2Vycm9yVGV4dH1gKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gcmVtb3ZlVGVhbU1lbWJlciBzdWNjZXNzIHJlc3VsdDonLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gcmVtb3ZlVGVhbU1lbWJlciBlcnJvcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGVUZWFtTWVtYmVyUm9sZShwcm9qZWN0SWQ6IHN0cmluZywgdXNlcklkOiBzdHJpbmcsIHJvbGU6IHN0cmluZykge1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSB1cGRhdGVUZWFtTWVtYmVyUm9sZSBjYWxsZWQgd2l0aDonLCB7IHByb2plY3RJZCwgdXNlcklkLCByb2xlIH0pO1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBVUkw6JywgYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9L3RlYW0tbWVtYmVycy8ke3VzZXJJZH1gKTtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gSGVhZGVyczonLCB0aGlzLmdldEF1dGhIZWFkZXIoKSk7XG4gICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIFJlcXVlc3QgQm9keTonLCBKU09OLnN0cmluZ2lmeSh7IHJvbGUgfSwgbnVsbCwgMikpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Byb2plY3RzLyR7cHJvamVjdElkfS90ZWFtLW1lbWJlcnMvJHt1c2VySWR9YCwge1xuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyByb2xlIH0pXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIHVwZGF0ZVRlYW1NZW1iZXJSb2xlIHJlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIHVwZGF0ZVRlYW1NZW1iZXJSb2xlIHJlc3BvbnNlIG9rOicsIHJlc3BvbnNlLm9rKTtcbiAgICAgIFxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIGRldkVycm9yKCdBUEkgU2VydmljZSAtIHVwZGF0ZVRlYW1NZW1iZXJSb2xlIGVycm9yIHJlc3BvbnNlOicsIGVycm9yVGV4dCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSB1cGRhdGVUZWFtTWVtYmVyUm9sZSBzdWNjZXNzIHJlc3VsdDonLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gdXBkYXRlVGVhbU1lbWJlclJvbGUgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYnVsa0FkZFRlYW1NZW1iZXJzKHByb2plY3RJZDogc3RyaW5nLCB0ZWFtTWVtYmVyczogQXJyYXk8eyB1c2VySWQ6IHN0cmluZzsgcm9sZT86IHN0cmluZyB9Pikge1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBidWxrQWRkVGVhbU1lbWJlcnMgY2FsbGVkIHdpdGg6JywgeyBwcm9qZWN0SWQsIHRlYW1NZW1iZXJzIH0pO1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBVUkw6JywgYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9L3RlYW0tbWVtYmVycy9idWxrYCk7XG4gICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIEhlYWRlcnM6JywgdGhpcy5nZXRBdXRoSGVhZGVyKCkpO1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBSZXF1ZXN0IEJvZHk6JywgSlNPTi5zdHJpbmdpZnkoeyB0ZWFtTWVtYmVycyB9LCBudWxsLCAyKSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvcHJvamVjdHMvJHtwcm9qZWN0SWR9L3RlYW0tbWVtYmVycy9idWxrYCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdGVhbU1lbWJlcnMgfSlcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gYnVsa0FkZFRlYW1NZW1iZXJzIHJlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIGJ1bGtBZGRUZWFtTWVtYmVycyByZXNwb25zZSBvazonLCByZXNwb25zZS5vayk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSBidWxrQWRkVGVhbU1lbWJlcnMgZXJyb3IgcmVzcG9uc2U6JywgZXJyb3JUZXh0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtlcnJvclRleHR9YCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIGJ1bGtBZGRUZWFtTWVtYmVycyBzdWNjZXNzIHJlc3VsdDonLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gYnVsa0FkZFRlYW1NZW1iZXJzIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZhbGxiYWNrIG1ldGhvZCB1c2luZyBwcm9qZWN0IHVwZGF0ZSBBUElcbiAgYXN5bmMgYWRkVGVhbU1lbWJlcnNWaWFQcm9qZWN0VXBkYXRlKHByb2plY3RJZDogc3RyaW5nLCB1c2VySWRzOiBzdHJpbmdbXSkge1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBhZGRUZWFtTWVtYmVyc1ZpYVByb2plY3RVcGRhdGUgY2FsbGVkIHdpdGg6JywgeyBwcm9qZWN0SWQsIHVzZXJJZHMgfSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIEZpcnN0IGdldCB0aGUgY3VycmVudCBwcm9qZWN0IGRhdGFcbiAgICAgIGNvbnN0IGN1cnJlbnRQcm9qZWN0ID0gYXdhaXQgdGhpcy5nZXRQcm9qZWN0QnlJZChwcm9qZWN0SWQpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIEN1cnJlbnQgcHJvamVjdCBkYXRhOicsIGN1cnJlbnRQcm9qZWN0KTtcbiAgICAgIFxuICAgICAgLy8gR2V0IGN1cnJlbnQgdGVhbU1lbWJlcnMgYXJyYXkgKG5vdCBhc3NpZ25lZFRvKVxuICAgICAgY29uc3QgY3VycmVudFRlYW1NZW1iZXJzID0gY3VycmVudFByb2plY3QudGVhbU1lbWJlcnMgfHwgW107XG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gQ3VycmVudCB0ZWFtTWVtYmVyczonLCBjdXJyZW50VGVhbU1lbWJlcnMpO1xuICAgICAgXG4gICAgICAvLyBFeHRyYWN0IGV4aXN0aW5nIHVzZXIgSURzIGZyb20gdGVhbU1lbWJlcnMgKGhhbmRsZSBib3RoIGRpcmVjdCB1c2VyIG9iamVjdHMgYW5kIG5lc3RlZCB1c2VyIG9iamVjdHMpXG4gICAgICBjb25zdCBleGlzdGluZ1VzZXJJZHMgPSBjdXJyZW50VGVhbU1lbWJlcnMubWFwKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKGl0ZW0udXNlciAmJiBpdGVtLnVzZXIuX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS51c2VyLl9pZDsgLy8gTmVzdGVkIHVzZXIgb2JqZWN0XG4gICAgICAgICAgfSBlbHNlIGlmIChpdGVtLl9pZCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uX2lkOyAvLyBEaXJlY3QgdXNlciBvYmplY3RcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoKGlkOiBzdHJpbmcgfCBudWxsKSA9PiBpZCAhPT0gbnVsbCk7XG4gICAgICBcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBFeGlzdGluZyB0ZWFtIG1lbWJlciB1c2VyIElEczonLCBleGlzdGluZ1VzZXJJZHMpO1xuICAgICAgXG4gICAgICAvLyBBZGQgbmV3IHVzZXIgSURzIHRvIHRoZSBhcnJheSAoYXZvaWRpbmcgZHVwbGljYXRlcylcbiAgICAgIGNvbnN0IHVwZGF0ZWRVc2VySWRzID0gWy4uLm5ldyBTZXQoWy4uLmV4aXN0aW5nVXNlcklkcywgLi4udXNlcklkc10pXTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBVcGRhdGVkIHVzZXIgSURzOicsIHVwZGF0ZWRVc2VySWRzKTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIHRlYW1NZW1iZXJzIGFycmF5IHdpdGggcHJvcGVyIHN0cnVjdHVyZSBmb3IgYmFja2VuZFxuICAgICAgY29uc3QgdXBkYXRlZFRlYW1NZW1iZXJzID0gdXBkYXRlZFVzZXJJZHMubWFwKHVzZXJJZCA9PiAoe1xuICAgICAgICB1c2VyOiB1c2VySWQsXG4gICAgICAgIHJvbGU6ICdtZW1iZXInIC8vIGRlZmF1bHQgcm9sZVxuICAgICAgfSkpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgdGhlIHByb2plY3Qgd2l0aCBuZXcgdGVhbU1lbWJlcnMgYXJyYXlcbiAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7XG4gICAgICAgIC4uLmN1cnJlbnRQcm9qZWN0LFxuICAgICAgICB0ZWFtTWVtYmVyczogdXBkYXRlZFRlYW1NZW1iZXJzXG4gICAgICB9O1xuICAgICAgXG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gVXBkYXRlIGRhdGE6JywgdXBkYXRlRGF0YSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMudXBkYXRlUHJvamVjdChwcm9qZWN0SWQsIHVwZGF0ZURhdGEpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIFByb2plY3QgdXBkYXRlIHJlc3VsdDonLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gYWRkVGVhbU1lbWJlcnNWaWFQcm9qZWN0VXBkYXRlIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlbW92ZVRlYW1NZW1iZXJWaWFQcm9qZWN0VXBkYXRlKHByb2plY3RJZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZykge1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSByZW1vdmVUZWFtTWVtYmVyVmlhUHJvamVjdFVwZGF0ZSBjYWxsZWQgd2l0aDonLCB7IHByb2plY3RJZCwgdXNlcklkIH0pO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBGaXJzdCBnZXQgdGhlIGN1cnJlbnQgcHJvamVjdCBkYXRhXG4gICAgICBjb25zdCBjdXJyZW50UHJvamVjdCA9IGF3YWl0IHRoaXMuZ2V0UHJvamVjdEJ5SWQocHJvamVjdElkKTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBDdXJyZW50IHByb2plY3QgZGF0YTonLCBjdXJyZW50UHJvamVjdCk7XG4gICAgICBcbiAgICAgIC8vIEdldCBjdXJyZW50IHRlYW1NZW1iZXJzIGFycmF5IChub3QgYXNzaWduZWRUbylcbiAgICAgIGNvbnN0IGN1cnJlbnRUZWFtTWVtYmVycyA9IGN1cnJlbnRQcm9qZWN0LnRlYW1NZW1iZXJzIHx8IFtdO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIEN1cnJlbnQgdGVhbU1lbWJlcnMgYmVmb3JlIHJlbW92YWw6JywgY3VycmVudFRlYW1NZW1iZXJzKTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBDdXJyZW50IHRlYW1NZW1iZXJzIGNvdW50IGJlZm9yZSByZW1vdmFsOicsIGN1cnJlbnRUZWFtTWVtYmVycy5sZW5ndGgpO1xuICAgICAgXG4gICAgICAvLyBMb2cgZWFjaCB0ZWFtIG1lbWJlciBmb3IgZGVidWdnaW5nXG4gICAgICBjdXJyZW50VGVhbU1lbWJlcnMuZm9yRWFjaCgobWVtYmVyOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgbWVtYmVyVXNlcklkID0gdHlwZW9mIG1lbWJlci51c2VyID09PSAnc3RyaW5nJyA/IG1lbWJlci51c2VyIDogbWVtYmVyLnVzZXIuX2lkO1xuICAgICAgICBkZXZMb2coYEFQSSBTZXJ2aWNlIC0gVGVhbSBtZW1iZXIgJHtpbmRleH06YCwge1xuICAgICAgICAgIG1lbWJlcixcbiAgICAgICAgICBtZW1iZXJVc2VySWQsXG4gICAgICAgICAgc2hvdWxkUmVtb3ZlOiBtZW1iZXJVc2VySWQgPT09IHVzZXJJZFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgT05MWSB0aGUgc3BlY2lmaWMgdXNlciBJRCBmcm9tIHRoZSB0ZWFtTWVtYmVycyBhcnJheVxuICAgICAgY29uc3QgdXBkYXRlZFRlYW1NZW1iZXJzID0gY3VycmVudFRlYW1NZW1iZXJzLmZpbHRlcigoaXRlbTogYW55KSA9PiB7XG4gICAgICAgIGlmIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtLnVzZXIpIHtcbiAgICAgICAgICBjb25zdCBpdGVtVXNlcklkID0gdHlwZW9mIGl0ZW0udXNlciA9PT0gJ3N0cmluZycgPyBpdGVtLnVzZXIgOiBpdGVtLnVzZXIuX2lkO1xuICAgICAgICAgIGNvbnN0IHNob3VsZEtlZXAgPSBpdGVtVXNlcklkICE9PSB1c2VySWQ7XG4gICAgICAgICAgZGV2TG9nKGBBUEkgU2VydmljZSAtIEZpbHRlcmluZyB0ZWFtIG1lbWJlcjogJHtpdGVtVXNlcklkfSAhPT0gJHt1c2VySWR9ID0gJHtzaG91bGRLZWVwfWApO1xuICAgICAgICAgIHJldHVybiBzaG91bGRLZWVwO1xuICAgICAgICB9XG4gICAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBLZWVwaW5nIGl0ZW0gKG5vIHVzZXIgcHJvcGVydHkpOicsIGl0ZW0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gVXBkYXRlZCB0ZWFtTWVtYmVycyBhZnRlciByZW1vdmFsOicsIHVwZGF0ZWRUZWFtTWVtYmVycyk7XG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gVXBkYXRlZCB0ZWFtTWVtYmVycyBjb3VudCBhZnRlciByZW1vdmFsOicsIHVwZGF0ZWRUZWFtTWVtYmVycy5sZW5ndGgpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIFJlbW92ZWQgY291bnQ6JywgY3VycmVudFRlYW1NZW1iZXJzLmxlbmd0aCAtIHVwZGF0ZWRUZWFtTWVtYmVycy5sZW5ndGgpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgd2Ugb25seSByZW1vdmVkIG9uZSBtZW1iZXJcbiAgICAgIGlmIChjdXJyZW50VGVhbU1lbWJlcnMubGVuZ3RoIC0gdXBkYXRlZFRlYW1NZW1iZXJzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSBXQVJOSU5HOiBSZW1vdmVkIG1vcmUgdGhhbiBvbmUgdGVhbSBtZW1iZXIhJyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGVhbSBtZW1iZXIgcmVtb3ZhbCBmYWlsZWQgLSByZW1vdmVkIG1vcmUgdGhhbiBvbmUgbWVtYmVyJyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSB0aGUgcHJvamVjdCB3aXRoIG5ldyB0ZWFtTWVtYmVycyBhcnJheVxuICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHtcbiAgICAgICAgLi4uY3VycmVudFByb2plY3QsXG4gICAgICAgIHRlYW1NZW1iZXJzOiB1cGRhdGVkVGVhbU1lbWJlcnNcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBVcGRhdGUgZGF0YTonLCB1cGRhdGVEYXRhKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy51cGRhdGVQcm9qZWN0KHByb2plY3RJZCwgdXBkYXRlRGF0YSk7XG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gUHJvamVjdCB1cGRhdGUgcmVzdWx0OicsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSByZW1vdmVUZWFtTWVtYmVyVmlhUHJvamVjdFVwZGF0ZSBlcnJvcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvLyBUYXNrIEFQSXNcbiAgYXN5bmMgZ2V0VGFza3MocGFyYW1zPzogeyBzdGF0dXM/OiBzdHJpbmc7IHRhc2tUeXBlPzogc3RyaW5nOyB2aWV3Pzogc3RyaW5nOyBwcm9qZWN0SWQ/OiBzdHJpbmc7IGFzc2lnbmVkVG8/OiBzdHJpbmc7IGRlcGFydG1lbnQ/OiBzdHJpbmcgfSk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICBPYmplY3QuZW50cmllcyhwYXJhbXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSAnJykgcXVlcnkuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVybCA9IGAke0FQSV9CQVNFX1VSTH0vYXBpL3Rhc2tzJHtxdWVyeS50b1N0cmluZygpID8gYD8ke3F1ZXJ5LnRvU3RyaW5nKCl9YCA6ICcnfWA7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgICAgfSk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gZ2V0VGFza3MgcmVzcG9uc2U6JywgZGF0YSk7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gZ2V0VGFza3MgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0VGFza3NCeVByb2plY3QocHJvamVjdElkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9wcm9qZWN0cy8ke3Byb2plY3RJZH0vdGFza3NgLCB7XG4gICAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBwcm9qZWN0IHRhc2tzOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFRhc2tCeUlkKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Rhc2tzLyR7aWR9YCwge1xuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVUYXNrKHRhc2tEYXRhOiB7XG4gICAgcHJvamVjdElkOiBzdHJpbmc7XG4gICAgdGFzazogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHRhc2tUeXBlPzogc3RyaW5nO1xuICAgIHN0YXR1czogc3RyaW5nO1xuICAgIHByaW9yaXR5OiBzdHJpbmc7XG4gICAgYXNzaWduZWRUbzogc3RyaW5nO1xuICAgIHJlcG9ydGVyOiBzdHJpbmc7XG4gICAgc3RhcnREYXRlPzogc3RyaW5nO1xuICAgIGV0YTogc3RyaW5nO1xuICAgIGVzdGltYXRlZEhvdXJzPzogbnVtYmVyO1xuICAgIGFjdHVhbEhvdXJzPzogbnVtYmVyO1xuICAgIHJlbWFyaz86IHN0cmluZztcbiAgICByb2FkQmxvY2s/OiBzdHJpbmc7XG4gICAgc3VwcG9ydE5lZWRlZD86IHN0cmluZztcbiAgICBsYWJlbHM/OiBzdHJpbmdbXTtcbiAgICBhdHRhY2htZW50cz86IHN0cmluZ1tdO1xuICAgIHJlbGF0ZWRUYXNrcz86IHN0cmluZ1tdO1xuICAgIHBhcmVudFRhc2s/OiBzdHJpbmc7XG4gICAgc3ByaW50Pzogc3RyaW5nO1xuICB9KSB7XG4gICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIGNyZWF0ZVRhc2sgY2FsbGVkIHdpdGg6JywgdGFza0RhdGEpO1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBVUkw6JywgYCR7QVBJX0JBU0VfVVJMfS9hcGkvdGFza3NgKTtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gSGVhZGVyczonLCB0aGlzLmdldEF1dGhIZWFkZXIoKSk7XG4gICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIFJlcXVlc3QgQm9keTonLCBKU09OLnN0cmluZ2lmeSh0YXNrRGF0YSwgbnVsbCwgMikpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL3Rhc2tzYCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRhc2tEYXRhKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBSZXNwb25zZSBzdGF0dXM6JywgcmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSBSZXNwb25zZSBvazonLCByZXNwb25zZS5vayk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSBFcnJvciByZXNwb25zZSBib2R5OicsIGVycm9yVGV4dCk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7ZXJyb3JUZXh0fWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZmV0Y2hFcnJvcikge1xuICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gRmV0Y2ggZXJyb3I6JywgZmV0Y2hFcnJvcik7XG4gICAgICB0aHJvdyBmZXRjaEVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVRhc2soaWQ6IHN0cmluZywgdGFza0RhdGE6IGFueSkge1xuICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSB1cGRhdGVUYXNrIGNhbGxlZCB3aXRoIElEOicsIGlkKTtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gdXBkYXRlVGFzayBkYXRhOicsIHRhc2tEYXRhKTtcbiAgICBkZXZMb2coJ0FQSSBTZXJ2aWNlIC0gdXBkYXRlVGFzayBVUkw6JywgYCR7QVBJX0JBU0VfVVJMfS9hcGkvdGFza3MvJHtpZH1gKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfWAsIHtcbiAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRhc2tEYXRhKVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGRldkxvZygnQVBJIFNlcnZpY2UgLSB1cGRhdGVUYXNrIHJlc3BvbnNlIHN0YXR1czonLCByZXNwb25zZS5zdGF0dXMpO1xuICAgICAgZGV2TG9nKCdBUEkgU2VydmljZSAtIHVwZGF0ZVRhc2sgcmVzcG9uc2Ugb2s6JywgcmVzcG9uc2Uub2spO1xuICAgICAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgZGV2RXJyb3IoJ0FQSSBTZXJ2aWNlIC0gdXBkYXRlVGFzayBlcnJvciByZXNwb25zZTonLCBlcnJvclRleHQpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke2Vycm9yVGV4dH1gKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBkZXZFcnJvcignQVBJIFNlcnZpY2UgLSB1cGRhdGVUYXNrIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVRhc2soaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdGFza3MvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVUYXNrU3RhdHVzKGlkOiBzdHJpbmcsIHN0YXR1czogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfS9zdGF0dXNgLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHN0YXR1cyB9KVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIGFzeW5jIGFzc2lnblRhc2soaWQ6IHN0cmluZywgYXNzaWduZWRUbzogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS90YXNrcy8ke2lkfS9hc3NpZ25gLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFzc2lnbmVkVG8gfSlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICAvLyBVc2VyIFRhc2sgQVBJc1xuICBhc3luYyBnZXRVc2VyVGFza3MocGFyYW1zPzoge1xuICAgIHVzZXJJZD86IHN0cmluZztcbiAgICBkYXRlPzogc3RyaW5nO1xuICAgIHR5cGVPZldvcms/OiBzdHJpbmc7XG4gICAgc3RhdHVzPzogc3RyaW5nO1xuICB9KSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHF1ZXJ5LmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlci10YXNrcz8ke3F1ZXJ5LnRvU3RyaW5nKCl9YCxcbiAgICAgIHsgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCkgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlVXNlclRhc2sodGFza0RhdGE6IHtcbiAgICBkYXRlOiBzdHJpbmc7XG4gICAgdHlwZU9mV29yazogc3RyaW5nO1xuICAgIHdvcmtEZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHByb2plY3Q6IHN0cmluZztcbiAgICB0YXNrOiBzdHJpbmc7XG4gICAgZnJlcXVlbmN5OiBzdHJpbmc7XG4gICAgc3RhdHVzOiBzdHJpbmc7XG4gICAgaG91cnNTcGVudD86IG51bWJlcjtcbiAgICBub3Rlcz86IHN0cmluZztcbiAgfSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlci10YXNrc2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKCksXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh0YXNrRGF0YSlcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVVc2VyVGFzayhpZDogc3RyaW5nLCB0YXNrRGF0YTogYW55KSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS91c2VyLXRhc2tzLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodGFza0RhdGEpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlVXNlclRhc2soaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvdXNlci10YXNrcy8ke2lkfWAsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIC8vIERhc2hib2FyZCBBUElzXG4gIGFzeW5jIGdldERhc2hib2FyZFN0YXRzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvZGFzaGJvYXJkYCwge1xuICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gIH1cblxuICBhc3luYyBnZXRQcm9qZWN0c1N1bW1hcnkoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2FwaS9kYXNoYm9hcmQvcHJvamVjdHMtc3VtbWFyeWAsIHtcbiAgICAgIGhlYWRlcnM6IHRoaXMuZ2V0QXV0aEhlYWRlcigpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICB9XG5cbiAgYXN5bmMgZ2V0VGFza3NTdW1tYXJ5KCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9hcGkvZGFzaGJvYXJkL3Rhc2tzLXN1bW1hcnlgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIC8vIE5ldyBEYXNoYm9hcmQgU3VtbWFyeSBBUEkgLSBTaW5nbGUgY2FsbCBmb3IgYWxsIGRhc2hib2FyZCBkYXRhXG4gIGFzeW5jIGdldERhc2hib2FyZFN1bW1hcnkocGFyYW1zPzogeyBkZXBhcnRtZW50Pzogc3RyaW5nIH0pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcXVlcnkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgICBpZiAocGFyYW1zPy5kZXBhcnRtZW50KSB7XG4gICAgICAgIHF1ZXJ5LmFwcGVuZCgnZGVwYXJ0bWVudCcsIHBhcmFtcy5kZXBhcnRtZW50KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc3QgdXJsID0gYCR7QVBJX0JBU0VfVVJMfS9hcGkvZGFzaGJvYXJkL3N1bW1hcnkke3F1ZXJ5LnRvU3RyaW5nKCkgPyBgPyR7cXVlcnkudG9TdHJpbmcoKX1gIDogJyd9YDtcbiAgICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuICAgICAgICBoZWFkZXJzOiB0aGlzLmdldEF1dGhIZWFkZXIoKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGRldkVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggZGFzaGJvYXJkIHN1bW1hcnk6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGF2YWlsYWJsZSBkZXBhcnRtZW50cyBmb3IgYWRtaW4gdXNlcnNcbiAgYXN5bmMgZ2V0RGVwYXJ0bWVudHMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYXBpL2Rhc2hib2FyZC9kZXBhcnRtZW50c2AsIHtcbiAgICAgICAgaGVhZGVyczogdGhpcy5nZXRBdXRoSGVhZGVyKClcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW107XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGRldkVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggZGVwYXJ0bWVudHM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXBpU2VydmljZSA9IG5ldyBBcGlTZXJ2aWNlKCk7XG4iXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJpc0RldmVsb3BtZW50IiwiZGV2TG9nIiwiYXJncyIsImNvbnNvbGUiLCJsb2ciLCJkZXZFcnJvciIsImVycm9yIiwiQXBpU2VydmljZSIsImdldEF1dGhIZWFkZXIiLCJzdG9yZWQiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiYXV0aFZhbHVlIiwic3RhcnRzV2l0aCIsImhhbmRsZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJvayIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiaGVhZGVycyIsImVudHJpZXMiLCJlcnJvck1lc3NhZ2UiLCJlcnJvckRhdGEiLCJqc29uIiwibWVzc2FnZSIsIm1zZyIsInBhcnNlRXJyb3IiLCJlcnJvclRleHQiLCJ0ZXh0IiwidGVzdCIsInJlbW92ZUl0ZW0iLCJFcnJvciIsImRhdGEiLCJyZWdpc3RlciIsInVzZXJEYXRhIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImxvZ2luIiwiY3JlZGVudGlhbHMiLCJnZXRQcm9maWxlIiwidXBkYXRlUHJvZmlsZSIsImdldFVzZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0VXNlckJ5SWQiLCJpZCIsImdldEFzc2lnbmFibGVVc2VycyIsImdldE15VGVhbSIsImdldFByb2plY3RzIiwicGFyYW1zIiwicXVlcnkiLCJVUkxTZWFyY2hQYXJhbXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJhcHBlbmQiLCJ0b1N0cmluZyIsImdldFByb2plY3RCeUlkIiwidXJsIiwiQXV0aG9yaXphdGlvbiIsInJlc3VsdCIsImNyZWF0ZVByb2plY3QiLCJwcm9qZWN0RGF0YSIsInVwZGF0ZVByb2plY3QiLCJkZWxldGVQcm9qZWN0IiwiZ2V0UHJvamVjdFRhc2tzIiwicHJvamVjdElkIiwiYWRkVGVhbU1lbWJlciIsInVzZXJJZCIsInJvbGUiLCJyZW1vdmVUZWFtTWVtYmVyIiwidXBkYXRlVGVhbU1lbWJlclJvbGUiLCJidWxrQWRkVGVhbU1lbWJlcnMiLCJ0ZWFtTWVtYmVycyIsImFkZFRlYW1NZW1iZXJzVmlhUHJvamVjdFVwZGF0ZSIsInVzZXJJZHMiLCJjdXJyZW50UHJvamVjdCIsImN1cnJlbnRUZWFtTWVtYmVycyIsImV4aXN0aW5nVXNlcklkcyIsIm1hcCIsIml0ZW0iLCJ1c2VyIiwiX2lkIiwiZmlsdGVyIiwidXBkYXRlZFVzZXJJZHMiLCJTZXQiLCJ1cGRhdGVkVGVhbU1lbWJlcnMiLCJ1cGRhdGVEYXRhIiwicmVtb3ZlVGVhbU1lbWJlclZpYVByb2plY3RVcGRhdGUiLCJsZW5ndGgiLCJtZW1iZXIiLCJpbmRleCIsIm1lbWJlclVzZXJJZCIsInNob3VsZFJlbW92ZSIsIml0ZW1Vc2VySWQiLCJzaG91bGRLZWVwIiwiZ2V0VGFza3MiLCJnZXRUYXNrc0J5UHJvamVjdCIsImdldFRhc2tCeUlkIiwiY3JlYXRlVGFzayIsInRhc2tEYXRhIiwiZmV0Y2hFcnJvciIsInVwZGF0ZVRhc2siLCJkZWxldGVUYXNrIiwidXBkYXRlVGFza1N0YXR1cyIsImFzc2lnblRhc2siLCJhc3NpZ25lZFRvIiwiZ2V0VXNlclRhc2tzIiwiY3JlYXRlVXNlclRhc2siLCJ1cGRhdGVVc2VyVGFzayIsImRlbGV0ZVVzZXJUYXNrIiwiZ2V0RGFzaGJvYXJkU3RhdHMiLCJnZXRQcm9qZWN0c1N1bW1hcnkiLCJnZXRUYXNrc1N1bW1hcnkiLCJnZXREYXNoYm9hcmRTdW1tYXJ5IiwiZGVwYXJ0bWVudCIsImdldERlcGFydG1lbnRzIiwiYXBpU2VydmljZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ })

});