"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/project-tracker/[id]/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(app-pages-browser)/./lib/config.ts\");\n\nconst API_BASE_URL = _config__WEBPACK_IMPORTED_MODULE_0__.config.getApiUrl();\n// Check if we're in development mode\nconst isDevelopment = \"development\" === 'development';\n// Helper function for development-only logging\nconst devLog = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    if (isDevelopment) {\n        console.log(...args);\n    }\n};\n// Helper function for development-only error logging\nconst devError = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    if (isDevelopment) {\n        console.error(...args);\n    }\n};\nclass ApiService {\n    getAuthHeader() {\n        console.log('getAuthHeader');\n        const stored = localStorage.getItem('token') || '';\n        const authValue = stored ? stored.startsWith('Bearer ') ? stored : \"Bearer \".concat(stored) : '';\n        return {\n            'Content-Type': 'application/json',\n            ...authValue && {\n                'Authorization': authValue\n            }\n        };\n    }\n    async handleResponse(response) {\n        devLog('API Response Status:', response.status);\n        devLog('API Response OK:', response.ok);\n        devLog('API Response Headers:', Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n            let errorMessage = 'API request failed';\n            try {\n                const errorData = await response.json();\n                devLog('API Error Data:', errorData);\n                errorMessage = errorData.message || errorData.error || errorData.msg || 'API request failed';\n            } catch (parseError) {\n                devLog('Failed to parse error response:', parseError);\n                const errorText = await response.text();\n                devLog('Raw error response:', errorText);\n                errorMessage = errorText || 'API request failed';\n            }\n            // If token invalid/expired, clear storage to force re-login\n            if (response.status === 401 || /token/i.test(errorMessage || '')) {\n                try {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('currentUser');\n                } catch (e) {}\n            }\n            throw new Error(errorMessage);\n        }\n        try {\n            const data = await response.json();\n            devLog('API Success Response:', data);\n            return data;\n        } catch (parseError) {\n            devLog('Failed to parse success response:', parseError);\n            throw new Error('Failed to parse API response');\n        }\n    }\n    // Authentication APIs\n    async register(userData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        return this.handleResponse(response);\n    }\n    async login(credentials) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        return this.handleResponse(response);\n    }\n    async getProfile() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateProfile(data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(data)\n        });\n        return this.handleResponse(response);\n    }\n    // User APIs\n    async getUsers() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users\"), {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            devLog('API Service - getUsers response:', data);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('API Service - getUsers error:', error);\n            throw error;\n        }\n    }\n    async getUserById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // New RBAC helper endpoints\n    async getAssignableUsers() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/helpers/assignable-users\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getMyTeam() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/helpers/my-team\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Project APIs\n    async getProjects(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value.toString());\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectById(id) {\n        try {\n            const url = \"\".concat(API_BASE_URL, \"/api/projects/\").concat(id);\n            const headers = this.getAuthHeader();\n            console.log('getProjectById - URL:', url);\n            console.log('getProjectById - Headers:', headers);\n            console.log('getProjectById - Authorization header:', headers.Authorization);\n            const response = await fetch(url, {\n                headers: headers\n            });\n            console.log('getProjectById - Response status:', response.status);\n            console.log('getProjectById - Response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('getProjectById - Error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            console.log('getProjectById - Success result:', result);\n            return result;\n        } catch (error) {\n            console.error('getProjectById - Error:', error);\n            throw error;\n        }\n    }\n    async createProject(projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateProject(id, projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteProject(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectTasks(projectId) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Team Member Management APIs\n    async addTeamMember(projectId, userId) {\n        let role = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'member';\n        devLog('API Service - addTeamMember called with:', {\n            projectId,\n            userId,\n            role\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            userId,\n            role\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    userId,\n                    role\n                })\n            });\n            devLog('API Service - addTeamMember response status:', response.status);\n            devLog('API Service - addTeamMember response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - addTeamMember error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - addTeamMember success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - addTeamMember error:', error);\n            throw error;\n        }\n    }\n    async removeTeamMember(projectId, userId) {\n        devLog('API Service - removeTeamMember called with:', {\n            projectId,\n            userId\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId), {\n                method: 'DELETE',\n                headers: this.getAuthHeader()\n            });\n            devLog('API Service - removeTeamMember response status:', response.status);\n            devLog('API Service - removeTeamMember response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - removeTeamMember error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - removeTeamMember success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - removeTeamMember error:', error);\n            throw error;\n        }\n    }\n    async updateTeamMemberRole(projectId, userId, role) {\n        devLog('API Service - updateTeamMemberRole called with:', {\n            projectId,\n            userId,\n            role\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            role\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId), {\n                method: 'PUT',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    role\n                })\n            });\n            devLog('API Service - updateTeamMemberRole response status:', response.status);\n            devLog('API Service - updateTeamMemberRole response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - updateTeamMemberRole error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - updateTeamMemberRole success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - updateTeamMemberRole error:', error);\n            throw error;\n        }\n    }\n    async bulkAddTeamMembers(projectId, teamMembers) {\n        devLog('API Service - bulkAddTeamMembers called with:', {\n            projectId,\n            teamMembers\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/bulk\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            teamMembers\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/bulk\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    teamMembers\n                })\n            });\n            devLog('API Service - bulkAddTeamMembers response status:', response.status);\n            devLog('API Service - bulkAddTeamMembers response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - bulkAddTeamMembers error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - bulkAddTeamMembers success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - bulkAddTeamMembers error:', error);\n            throw error;\n        }\n    }\n    // Fallback method using project update API\n    async addTeamMembersViaProjectUpdate(projectId, userIds) {\n        devLog('API Service - addTeamMembersViaProjectUpdate called with:', {\n            projectId,\n            userIds\n        });\n        try {\n            // First get the current project data\n            const currentProject = await this.getProjectById(projectId);\n            devLog('API Service - Current project data:', currentProject);\n            // Get current teamMembers array (not assignedTo)\n            const currentTeamMembers = currentProject.teamMembers || [];\n            devLog('API Service - Current teamMembers:', currentTeamMembers);\n            // Extract existing user IDs from teamMembers (handle both direct user objects and nested user objects)\n            const existingUserIds = currentTeamMembers.map((item)=>{\n                if (item && typeof item === 'object') {\n                    if (item.user && item.user._id) {\n                        return item.user._id; // Nested user object\n                    } else if (item._id) {\n                        return item._id; // Direct user object\n                    }\n                }\n                return null;\n            }).filter((id)=>id !== null);\n            devLog('API Service - Existing team member user IDs:', existingUserIds);\n            // Add new user IDs to the array (avoiding duplicates)\n            const updatedUserIds = [\n                ...new Set([\n                    ...existingUserIds,\n                    ...userIds\n                ])\n            ];\n            devLog('API Service - Updated user IDs:', updatedUserIds);\n            // Create teamMembers array with proper structure for backend\n            const updatedTeamMembers = updatedUserIds.map((userId)=>({\n                    user: userId,\n                    role: 'member' // default role\n                }));\n            // Update the project with new teamMembers array\n            const updateData = {\n                ...currentProject,\n                teamMembers: updatedTeamMembers\n            };\n            devLog('API Service - Update data:', updateData);\n            const result = await this.updateProject(projectId, updateData);\n            devLog('API Service - Project update result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - addTeamMembersViaProjectUpdate error:', error);\n            throw error;\n        }\n    }\n    async removeTeamMemberViaProjectUpdate(projectId, userId) {\n        devLog('API Service - removeTeamMemberViaProjectUpdate called with:', {\n            projectId,\n            userId\n        });\n        try {\n            // First get the current project data\n            const currentProject = await this.getProjectById(projectId);\n            devLog('API Service - Current project data:', currentProject);\n            // Get current teamMembers array (not assignedTo)\n            const currentTeamMembers = currentProject.teamMembers || [];\n            devLog('API Service - Current teamMembers before removal:', currentTeamMembers);\n            devLog('API Service - Current teamMembers count before removal:', currentTeamMembers.length);\n            // Log each team member for debugging\n            currentTeamMembers.forEach((member, index)=>{\n                const memberUserId = typeof member.user === 'string' ? member.user : member.user._id;\n                devLog(\"API Service - Team member \".concat(index, \":\"), {\n                    member,\n                    memberUserId,\n                    shouldRemove: memberUserId === userId\n                });\n            });\n            // Remove ONLY the specific user ID from the teamMembers array\n            const updatedTeamMembers = currentTeamMembers.filter((item)=>{\n                if (item && typeof item === 'object' && item.user) {\n                    const itemUserId = typeof item.user === 'string' ? item.user : item.user._id;\n                    const shouldKeep = itemUserId !== userId;\n                    devLog(\"API Service - Filtering team member: \".concat(itemUserId, \" !== \").concat(userId, \" = \").concat(shouldKeep));\n                    return shouldKeep;\n                }\n                devLog('API Service - Keeping item (no user property):', item);\n                return true;\n            });\n            devLog('API Service - Updated teamMembers after removal:', updatedTeamMembers);\n            devLog('API Service - Updated teamMembers count after removal:', updatedTeamMembers.length);\n            devLog('API Service - Removed count:', currentTeamMembers.length - updatedTeamMembers.length);\n            // Verify we only removed one member\n            if (currentTeamMembers.length - updatedTeamMembers.length !== 1) {\n                devError('API Service - WARNING: Removed more than one team member!');\n                throw new Error('Team member removal failed - removed more than one member');\n            }\n            // Update the project with new teamMembers array\n            const updateData = {\n                ...currentProject,\n                teamMembers: updatedTeamMembers\n            };\n            devLog('API Service - Update data:', updateData);\n            const result = await this.updateProject(projectId, updateData);\n            devLog('API Service - Project update result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - removeTeamMemberViaProjectUpdate error:', error);\n            throw error;\n        }\n    }\n    // Task APIs\n    async getTasks(params) {\n        try {\n            const query = new URLSearchParams();\n            if (params) {\n                Object.entries(params).forEach((param)=>{\n                    let [key, value] = param;\n                    if (value !== undefined && value !== '') query.append(key, value);\n                });\n            }\n            const url = \"\".concat(API_BASE_URL, \"/api/tasks\").concat(query.toString() ? \"?\".concat(query.toString()) : '');\n            const response = await fetch(url, {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            devLog('API Service - getTasks response:', data);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('API Service - getTasks error:', error);\n            throw error;\n        }\n    }\n    async getTasksByProject(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n                headers: this.getAuthHeader()\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            devError('Failed to fetch project tasks:', error);\n            throw error;\n        }\n    }\n    async getTaskById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createTask(taskData) {\n        devLog('API Service - createTask called with:', taskData);\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/tasks\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify(taskData, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            devLog('API Service - Response status:', response.status);\n            devLog('API Service - Response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - Error response body:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return this.handleResponse(response);\n        } catch (fetchError) {\n            devError('API Service - Fetch error:', fetchError);\n            throw fetchError;\n        }\n    }\n    async updateTask(id, taskData) {\n        devLog('API Service - updateTask called with ID:', id);\n        devLog('API Service - updateTask data:', taskData);\n        devLog('API Service - updateTask URL:', \"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n                method: 'PUT',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            devLog('API Service - updateTask response status:', response.status);\n            devLog('API Service - updateTask response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - updateTask error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return this.handleResponse(response);\n        } catch (error) {\n            devError('API Service - updateTask error:', error);\n            throw error;\n        }\n    }\n    async deleteTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateTaskStatus(id, status) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/status\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                status\n            })\n        });\n        return this.handleResponse(response);\n    }\n    async assignTask(id, assignedTo) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/assign\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                assignedTo\n            })\n        });\n        return this.handleResponse(response);\n    }\n    // User Task APIs\n    async getUserTasks(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value);\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createUserTask(taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateUserTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteUserTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Dashboard APIs\n    async getDashboardStats() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectsSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/projects-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTasksSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/tasks-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // New Dashboard Summary API - Single call for all dashboard data\n    async getDashboardSummary(params) {\n        try {\n            const query = new URLSearchParams();\n            if (params === null || params === void 0 ? void 0 : params.department) {\n                query.append('department', params.department);\n            }\n            const url = \"\".concat(API_BASE_URL, \"/api/dashboard/summary\").concat(query.toString() ? \"?\".concat(query.toString()) : '');\n            const response = await fetch(url, {\n                headers: this.getAuthHeader()\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            devError('Failed to fetch dashboard summary:', error);\n            throw error;\n        }\n    }\n    // Get available departments for admin users\n    async getDepartments() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/departments\"), {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('Failed to fetch departments:', error);\n            return [];\n        }\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/config.ts":
/*!***********************!*\
  !*** ./lib/config.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// Environment configuration\nconst config = {\n    // API Configuration\n    api: {\n        // Development backend URL\n        development: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000',\n        // Production backend URL\n        production: 'https://project-tracker-backend-xi.vercel.app'\n    },\n    // Environment detection\n    isDevelopment: \"development\" === 'development',\n    isProduction: \"development\" === 'production',\n    isStaging: \"development\" === 'staging',\n    // Get current API URL based on environment\n    getApiUrl: ()=>{\n        if (false) {}\n        return config.api.development;\n    },\n    // App configuration\n    app: {\n        name: 'Project Tracker',\n        version: process.env.npm_package_version || '1.0.0'\n    },\n    // Feature flags\n    features: {\n        enableDebugLogging: \"development\" === 'development',\n        enableAnalytics: \"development\" === 'production'\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0QkFBNEI7QUFDckIsTUFBTUEsU0FBUztJQUNwQixvQkFBb0I7SUFDcEJDLEtBQUs7UUFDSCwwQkFBMEI7UUFDMUJDLGFBQWFDLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0MsbUJBQW1CLElBQUk7UUFDaEQseUJBQXlCO1FBQ3pCQyxZQUFZO0lBQ2Q7SUFFQSx3QkFBd0I7SUFDeEJDLGVBQWVKLGtCQUF5QjtJQUN4Q0ssY0FBY0wsa0JBQXlCO0lBQ3ZDTSxXQUFXTixrQkFBeUI7SUFFcEMsMkNBQTJDO0lBQzNDTyxXQUFXO1FBQ1QsSUFBSVAsS0FBcUMsRUFBRSxFQUUxQztRQUNELE9BQU9ILE9BQU9DLEdBQUcsQ0FBQ0MsV0FBVztJQUMvQjtJQUVBLG9CQUFvQjtJQUNwQlMsS0FBSztRQUNIQyxNQUFNO1FBQ05DLFNBQVNWLE9BQU9BLENBQUNDLEdBQUcsQ0FBQ1UsbUJBQW1CLElBQUk7SUFDOUM7SUFFQSxnQkFBZ0I7SUFDaEJDLFVBQVU7UUFDUkMsb0JBQW9CYixrQkFBeUI7UUFDN0NjLGlCQUFpQmQsa0JBQXlCO0lBQzVDO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxTdW1pdCBNaXNocmFcXE9uZURyaXZlIC0gRWNvU291bCBIb21lXFxEb2N1bWVudHNcXFByb2plY3QgdHJhY2tlcnJcXFByb2plY3QgdHJhY2tlclxcbGliXFxjb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRW52aXJvbm1lbnQgY29uZmlndXJhdGlvblxyXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xyXG4gIC8vIEFQSSBDb25maWd1cmF0aW9uXHJcbiAgYXBpOiB7XHJcbiAgICAvLyBEZXZlbG9wbWVudCBiYWNrZW5kIFVSTFxyXG4gICAgZGV2ZWxvcG1lbnQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMCcsXHJcbiAgICAvLyBQcm9kdWN0aW9uIGJhY2tlbmQgVVJMXHJcbiAgICBwcm9kdWN0aW9uOiAnaHR0cHM6Ly9wcm9qZWN0LXRyYWNrZXItYmFja2VuZC14aS52ZXJjZWwuYXBwJyxcclxuICB9LFxyXG4gIFxyXG4gIC8vIEVudmlyb25tZW50IGRldGVjdGlvblxyXG4gIGlzRGV2ZWxvcG1lbnQ6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxyXG4gIGlzUHJvZHVjdGlvbjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcclxuICBpc1N0YWdpbmc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnc3RhZ2luZycsXHJcbiAgXHJcbiAgLy8gR2V0IGN1cnJlbnQgQVBJIFVSTCBiYXNlZCBvbiBlbnZpcm9ubWVudFxyXG4gIGdldEFwaVVybDogKCkgPT4ge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgcmV0dXJuIGNvbmZpZy5hcGkucHJvZHVjdGlvbjtcclxuICAgIH1cclxuICAgIHJldHVybiBjb25maWcuYXBpLmRldmVsb3BtZW50O1xyXG4gIH0sXHJcbiAgXHJcbiAgLy8gQXBwIGNvbmZpZ3VyYXRpb25cclxuICBhcHA6IHtcclxuICAgIG5hbWU6ICdQcm9qZWN0IFRyYWNrZXInLFxyXG4gICAgdmVyc2lvbjogcHJvY2Vzcy5lbnYubnBtX3BhY2thZ2VfdmVyc2lvbiB8fCAnMS4wLjAnLFxyXG4gIH0sXHJcbiAgXHJcbiAgLy8gRmVhdHVyZSBmbGFnc1xyXG4gIGZlYXR1cmVzOiB7XHJcbiAgICBlbmFibGVEZWJ1Z0xvZ2dpbmc6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxyXG4gICAgZW5hYmxlQW5hbHl0aWNzOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLFxyXG4gIH0sXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJjb25maWciLCJhcGkiLCJkZXZlbG9wbWVudCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwicHJvZHVjdGlvbiIsImlzRGV2ZWxvcG1lbnQiLCJpc1Byb2R1Y3Rpb24iLCJpc1N0YWdpbmciLCJnZXRBcGlVcmwiLCJhcHAiLCJuYW1lIiwidmVyc2lvbiIsIm5wbV9wYWNrYWdlX3ZlcnNpb24iLCJmZWF0dXJlcyIsImVuYWJsZURlYnVnTG9nZ2luZyIsImVuYWJsZUFuYWx5dGljcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/config.ts\n"));

/***/ })

});