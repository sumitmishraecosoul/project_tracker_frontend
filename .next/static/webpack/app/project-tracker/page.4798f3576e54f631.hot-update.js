"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/project-tracker/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\nconst API_BASE_URL = 'http://localhost:5000';\nclass ApiService {\n    getAuthHeader() {\n        const stored = localStorage.getItem('token') || '';\n        const authValue = stored ? stored.startsWith('Bearer ') ? stored : \"Bearer \".concat(stored) : '';\n        return {\n            'Content-Type': 'application/json',\n            ...authValue && {\n                'Authorization': authValue\n            }\n        };\n    }\n    async handleResponse(response) {\n        console.log('API Response Status:', response.status);\n        console.log('API Response OK:', response.ok);\n        console.log('API Response Headers:', Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n            let errorMessage = 'API request failed';\n            try {\n                const errorData = await response.json();\n                console.log('API Error Data:', errorData);\n                errorMessage = errorData.message || errorData.error || errorData.msg || 'API request failed';\n            } catch (parseError) {\n                console.log('Failed to parse error response:', parseError);\n                const errorText = await response.text();\n                console.log('Raw error response:', errorText);\n                errorMessage = errorText || 'API request failed';\n            }\n            // If token invalid/expired, clear storage to force re-login\n            if (response.status === 401 || /token/i.test(errorMessage || '')) {\n                try {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('currentUser');\n                } catch (e) {}\n            }\n            throw new Error(errorMessage);\n        }\n        try {\n            const data = await response.json();\n            console.log('API Success Response:', data);\n            return data;\n        } catch (parseError) {\n            console.log('Failed to parse success response:', parseError);\n            throw new Error('Failed to parse API response');\n        }\n    }\n    mapIdField(obj) {\n        if (!obj) return obj;\n        if (obj._id && !obj.id) {\n            return {\n                ...obj,\n                id: obj._id\n            };\n        }\n        return obj;\n    }\n    mapIdFields(array) {\n        if (!Array.isArray(array)) return array;\n        return array.map((item)=>this.mapIdField(item));\n    }\n    // Authentication APIs\n    async register(userData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        return this.handleResponse(response);\n    }\n    async login(credentials) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        return this.handleResponse(response);\n    }\n    async getProfile() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateProfile(data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(data)\n        });\n        return this.handleResponse(response);\n    }\n    // User APIs\n    async getUsers() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getUserById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Project APIs\n    async getProjects(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value.toString());\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createProject(projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateProject(id, projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteProject(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectTasks(projectId) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Task APIs\n    async getTasks() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTasksByProject(projectId) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks?projectId=\").concat(projectId), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTaskById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createTask(taskData) {\n        console.log('API Service - createTask called with:', taskData);\n        console.log('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/tasks\"));\n        console.log('API Service - Headers:', this.getAuthHeader());\n        console.log('API Service - Request Body:', JSON.stringify(taskData, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            console.log('API Service - Response status:', response.status);\n            console.log('API Service - Response ok:', response.ok);\n            return this.handleResponse(response);\n        } catch (fetchError) {\n            console.error('API Service - Fetch error:', fetchError);\n            throw fetchError;\n        }\n    }\n    async updateTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateTaskStatus(id, status) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/status\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                status\n            })\n        });\n        return this.handleResponse(response);\n    }\n    async assignTask(id, assignedTo) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/assign\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                assignedTo\n            })\n        });\n        return this.handleResponse(response);\n    }\n    // User Task APIs\n    async getUserTasks(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value);\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createUserTask(taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateUserTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteUserTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Dashboard APIs\n    async getDashboardStats() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectsSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/projects-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTasksSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/tasks-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ })

});