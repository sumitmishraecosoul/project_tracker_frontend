"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/task-tracker/page",{

/***/ "(app-pages-browser)/./lib/api-service.ts":
/*!****************************!*\
  !*** ./lib/api-service.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';\n// Check if we're in development mode\nconst isDevelopment = \"development\" === 'development';\n// Helper function for development-only logging\nconst devLog = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    if (isDevelopment) {\n        console.log(...args);\n    }\n};\n// Helper function for development-only error logging\nconst devError = function() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    if (isDevelopment) {\n        console.error(...args);\n    }\n};\nclass ApiService {\n    getAuthHeader() {\n        const stored = localStorage.getItem('token') || '';\n        const authValue = stored ? stored.startsWith('Bearer ') ? stored : \"Bearer \".concat(stored) : '';\n        return {\n            'Content-Type': 'application/json',\n            ...authValue && {\n                'Authorization': authValue\n            }\n        };\n    }\n    async handleResponse(response) {\n        devLog('API Response Status:', response.status);\n        devLog('API Response OK:', response.ok);\n        devLog('API Response Headers:', Object.fromEntries(response.headers.entries()));\n        if (!response.ok) {\n            let errorMessage = 'API request failed';\n            try {\n                const errorData = await response.json();\n                devLog('API Error Data:', errorData);\n                errorMessage = errorData.message || errorData.error || errorData.msg || 'API request failed';\n            } catch (parseError) {\n                devLog('Failed to parse error response:', parseError);\n                const errorText = await response.text();\n                devLog('Raw error response:', errorText);\n                errorMessage = errorText || 'API request failed';\n            }\n            // If token invalid/expired, clear storage to force re-login\n            if (response.status === 401 || /token/i.test(errorMessage || '')) {\n                try {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('currentUser');\n                } catch (e) {}\n            }\n            throw new Error(errorMessage);\n        }\n        try {\n            const data = await response.json();\n            devLog('API Success Response:', data);\n            return data;\n        } catch (parseError) {\n            devLog('Failed to parse success response:', parseError);\n            throw new Error('Failed to parse API response');\n        }\n    }\n    // Authentication APIs\n    async register(userData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/register\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        });\n        return this.handleResponse(response);\n    }\n    async login(credentials) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/login\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n        });\n        return this.handleResponse(response);\n    }\n    async getProfile() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateProfile(data) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/auth/profile\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(data)\n        });\n        return this.handleResponse(response);\n    }\n    // User APIs\n    async getUsers() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users\"), {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            devLog('API Service - getUsers response:', data);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('API Service - getUsers error:', error);\n            throw error;\n        }\n    }\n    async getUserById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/users/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Project APIs\n    async getProjects(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value.toString());\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createProject(projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateProject(id, projectData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(projectData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteProject(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectTasks(projectId) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Team Member Management APIs\n    async addTeamMember(projectId, userId) {\n        let role = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'member';\n        devLog('API Service - addTeamMember called with:', {\n            projectId,\n            userId,\n            role\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            userId,\n            role\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    userId,\n                    role\n                })\n            });\n            devLog('API Service - addTeamMember response status:', response.status);\n            devLog('API Service - addTeamMember response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - addTeamMember error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - addTeamMember success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - addTeamMember error:', error);\n            throw error;\n        }\n    }\n    async removeTeamMember(projectId, userId) {\n        devLog('API Service - removeTeamMember called with:', {\n            projectId,\n            userId\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId), {\n                method: 'DELETE',\n                headers: this.getAuthHeader()\n            });\n            devLog('API Service - removeTeamMember response status:', response.status);\n            devLog('API Service - removeTeamMember response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - removeTeamMember error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - removeTeamMember success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - removeTeamMember error:', error);\n            throw error;\n        }\n    }\n    async updateTeamMemberRole(projectId, userId, role) {\n        devLog('API Service - updateTeamMemberRole called with:', {\n            projectId,\n            userId,\n            role\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            role\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/\").concat(userId), {\n                method: 'PUT',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    role\n                })\n            });\n            devLog('API Service - updateTeamMemberRole response status:', response.status);\n            devLog('API Service - updateTeamMemberRole response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - updateTeamMemberRole error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - updateTeamMemberRole success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - updateTeamMemberRole error:', error);\n            throw error;\n        }\n    }\n    async bulkAddTeamMembers(projectId, teamMembers) {\n        devLog('API Service - bulkAddTeamMembers called with:', {\n            projectId,\n            teamMembers\n        });\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/bulk\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify({\n            teamMembers\n        }, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/team-members/bulk\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify({\n                    teamMembers\n                })\n            });\n            devLog('API Service - bulkAddTeamMembers response status:', response.status);\n            devLog('API Service - bulkAddTeamMembers response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - bulkAddTeamMembers error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            const result = await this.handleResponse(response);\n            devLog('API Service - bulkAddTeamMembers success result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - bulkAddTeamMembers error:', error);\n            throw error;\n        }\n    }\n    // Fallback method using project update API\n    async addTeamMembersViaProjectUpdate(projectId, userIds) {\n        devLog('API Service - addTeamMembersViaProjectUpdate called with:', {\n            projectId,\n            userIds\n        });\n        try {\n            // First get the current project data\n            const currentProject = await this.getProjectById(projectId);\n            devLog('API Service - Current project data:', currentProject);\n            // Get current teamMembers array (not assignedTo)\n            const currentTeamMembers = currentProject.teamMembers || [];\n            devLog('API Service - Current teamMembers:', currentTeamMembers);\n            // Extract existing user IDs from teamMembers (handle both direct user objects and nested user objects)\n            const existingUserIds = currentTeamMembers.map((item)=>{\n                if (item && typeof item === 'object') {\n                    if (item.user && item.user._id) {\n                        return item.user._id; // Nested user object\n                    } else if (item._id) {\n                        return item._id; // Direct user object\n                    }\n                }\n                return null;\n            }).filter((id)=>id !== null);\n            devLog('API Service - Existing team member user IDs:', existingUserIds);\n            // Add new user IDs to the array (avoiding duplicates)\n            const updatedUserIds = [\n                ...new Set([\n                    ...existingUserIds,\n                    ...userIds\n                ])\n            ];\n            devLog('API Service - Updated user IDs:', updatedUserIds);\n            // Create teamMembers array with proper structure for backend\n            const updatedTeamMembers = updatedUserIds.map((userId)=>({\n                    user: userId,\n                    role: 'member' // default role\n                }));\n            // Update the project with new teamMembers array\n            const updateData = {\n                ...currentProject,\n                teamMembers: updatedTeamMembers\n            };\n            devLog('API Service - Update data:', updateData);\n            const result = await this.updateProject(projectId, updateData);\n            devLog('API Service - Project update result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - addTeamMembersViaProjectUpdate error:', error);\n            throw error;\n        }\n    }\n    async removeTeamMemberViaProjectUpdate(projectId, userId) {\n        devLog('API Service - removeTeamMemberViaProjectUpdate called with:', {\n            projectId,\n            userId\n        });\n        try {\n            // First get the current project data\n            const currentProject = await this.getProjectById(projectId);\n            devLog('API Service - Current project data:', currentProject);\n            // Get current teamMembers array (not assignedTo)\n            const currentTeamMembers = currentProject.teamMembers || [];\n            devLog('API Service - Current teamMembers before removal:', currentTeamMembers);\n            devLog('API Service - Current teamMembers count before removal:', currentTeamMembers.length);\n            // Log each team member for debugging\n            currentTeamMembers.forEach((member, index)=>{\n                const memberUserId = typeof member.user === 'string' ? member.user : member.user._id;\n                devLog(\"API Service - Team member \".concat(index, \":\"), {\n                    member,\n                    memberUserId,\n                    shouldRemove: memberUserId === userId\n                });\n            });\n            // Remove ONLY the specific user ID from the teamMembers array\n            const updatedTeamMembers = currentTeamMembers.filter((item)=>{\n                if (item && typeof item === 'object' && item.user) {\n                    const itemUserId = typeof item.user === 'string' ? item.user : item.user._id;\n                    const shouldKeep = itemUserId !== userId;\n                    devLog(\"API Service - Filtering team member: \".concat(itemUserId, \" !== \").concat(userId, \" = \").concat(shouldKeep));\n                    return shouldKeep;\n                }\n                devLog('API Service - Keeping item (no user property):', item);\n                return true;\n            });\n            devLog('API Service - Updated teamMembers after removal:', updatedTeamMembers);\n            devLog('API Service - Updated teamMembers count after removal:', updatedTeamMembers.length);\n            devLog('API Service - Removed count:', currentTeamMembers.length - updatedTeamMembers.length);\n            // Verify we only removed one member\n            if (currentTeamMembers.length - updatedTeamMembers.length !== 1) {\n                devError('API Service - WARNING: Removed more than one team member!');\n                throw new Error('Team member removal failed - removed more than one member');\n            }\n            // Update the project with new teamMembers array\n            const updateData = {\n                ...currentProject,\n                teamMembers: updatedTeamMembers\n            };\n            devLog('API Service - Update data:', updateData);\n            const result = await this.updateProject(projectId, updateData);\n            devLog('API Service - Project update result:', result);\n            return result;\n        } catch (error) {\n            devError('API Service - removeTeamMemberViaProjectUpdate error:', error);\n            throw error;\n        }\n    }\n    // Task APIs\n    async getTasks() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n                headers: this.getAuthHeader()\n            });\n            const data = await this.handleResponse(response);\n            devLog('API Service - getTasks response:', data);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            devError('API Service - getTasks error:', error);\n            throw error;\n        }\n    }\n    async getTasksByProject(projectId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/projects/\").concat(projectId, \"/tasks\"), {\n                headers: this.getAuthHeader()\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            devError('Failed to fetch project tasks:', error);\n            throw error;\n        }\n    }\n    async getTaskById(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createTask(taskData) {\n        devLog('API Service - createTask called with:', taskData);\n        devLog('API Service - URL:', \"\".concat(API_BASE_URL, \"/api/tasks\"));\n        devLog('API Service - Headers:', this.getAuthHeader());\n        devLog('API Service - Request Body:', JSON.stringify(taskData, null, 2));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks\"), {\n                method: 'POST',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            devLog('API Service - Response status:', response.status);\n            devLog('API Service - Response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - Error response body:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return this.handleResponse(response);\n        } catch (fetchError) {\n            devError('API Service - Fetch error:', fetchError);\n            throw fetchError;\n        }\n    }\n    async updateTask(id, taskData) {\n        devLog('API Service - updateTask called with ID:', id);\n        devLog('API Service - updateTask data:', taskData);\n        devLog('API Service - updateTask URL:', \"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id));\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n                method: 'PUT',\n                headers: this.getAuthHeader(),\n                body: JSON.stringify(taskData)\n            });\n            devLog('API Service - updateTask response status:', response.status);\n            devLog('API Service - updateTask response ok:', response.ok);\n            if (!response.ok) {\n                const errorText = await response.text();\n                devError('API Service - updateTask error response:', errorText);\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return this.handleResponse(response);\n        } catch (error) {\n            devError('API Service - updateTask error:', error);\n            throw error;\n        }\n    }\n    async deleteTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async updateTaskStatus(id, status) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/status\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                status\n            })\n        });\n        return this.handleResponse(response);\n    }\n    async assignTask(id, assignedTo) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/tasks/\").concat(id, \"/assign\"), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify({\n                assignedTo\n            })\n        });\n        return this.handleResponse(response);\n    }\n    // User Task APIs\n    async getUserTasks(params) {\n        const query = new URLSearchParams();\n        if (params) {\n            Object.entries(params).forEach((param)=>{\n                let [key, value] = param;\n                if (value !== undefined) query.append(key, value);\n            });\n        }\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks?\").concat(query.toString()), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async createUserTask(taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks\"), {\n            method: 'POST',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async updateUserTask(id, taskData) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'PUT',\n            headers: this.getAuthHeader(),\n            body: JSON.stringify(taskData)\n        });\n        return this.handleResponse(response);\n    }\n    async deleteUserTask(id) {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/user-tasks/\").concat(id), {\n            method: 'DELETE',\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // Dashboard APIs\n    async getDashboardStats() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getProjectsSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/projects-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    async getTasksSummary() {\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/tasks-summary\"), {\n            headers: this.getAuthHeader()\n        });\n        return this.handleResponse(response);\n    }\n    // New Dashboard Summary API - Single call for all dashboard data\n    async getDashboardSummary() {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/dashboard/summary\"), {\n                headers: this.getAuthHeader()\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            devError('Failed to fetch dashboard summary:', error);\n            throw error;\n        }\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api-service.ts\n"));

/***/ })

});