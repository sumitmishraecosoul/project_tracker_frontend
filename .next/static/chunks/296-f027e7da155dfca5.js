"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[296],{1204:(e,t,a)=>{a.d(t,{$:()=>s});var r=a(9509);let s={api:{development:r.env.NEXT_PUBLIC_API_URL||"http://localhost:5000",production:"https://project-tracker-backend-xi.vercel.app"},isDevelopment:!1,isProduction:!0,getApiUrl:()=>s.api.production,app:{name:"Project Tracker",version:r.env.npm_package_version||"1.0.0"},features:{enableDebugLogging:!1,enableAnalytics:!0}}},7296:(e,t,a)=>{a.d(t,{K:()=>i});var r=a(1204);let s=r.$.getApiUrl(),c=function(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];r.$.features.enableDebugLogging&&console.log(...t)},o=function(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];r.$.features.enableDebugLogging&&console.error(...t)};class n{getAuthHeader(){console.log("getAuthHeader");let e=localStorage.getItem("token")||"",t=e?e.startsWith("Bearer ")?e:"Bearer ".concat(e):"";return{"Content-Type":"application/json",...t&&{Authorization:t}}}async handleResponse(e){if(c("API Response Status:",e.status),c("API Response OK:",e.ok),c("API Response Headers:",Object.fromEntries(e.headers.entries())),!e.ok){let t="API request failed";try{let a=await e.json();c("API Error Data:",a),t=a.message||a.error||a.msg||"API request failed"}catch(r){c("Failed to parse error response:",r);let a=await e.text();c("Raw error response:",a),t=a||"API request failed"}if(401===e.status||/token/i.test(t||""))try{localStorage.removeItem("token"),localStorage.removeItem("currentUser")}catch(e){}throw Error(t)}try{let t=await e.json();return c("API Success Response:",t),t}catch(e){throw c("Failed to parse success response:",e),Error("Failed to parse API response")}}async register(e){let t=await fetch("".concat(s,"/api/auth/register"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return this.handleResponse(t)}async login(e){let t=await fetch("".concat(s,"/api/auth/login"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return this.handleResponse(t)}async getProfile(){let e=await fetch("".concat(s,"/api/auth/profile"),{headers:this.getAuthHeader()});return this.handleResponse(e)}async updateProfile(e){let t=await fetch("".concat(s,"/api/auth/profile"),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(e)});return this.handleResponse(t)}async getUsers(){try{let e=await fetch("".concat(s,"/api/users"),{headers:this.getAuthHeader()}),t=await this.handleResponse(e);return c("API Service - getUsers response:",t),Array.isArray(t)?t:[]}catch(e){throw o("API Service - getUsers error:",e),e}}async getUserById(e){let t=await fetch("".concat(s,"/api/users/").concat(e),{headers:this.getAuthHeader()});return this.handleResponse(t)}async getAssignableUsers(){let e=await fetch("".concat(s,"/api/users/helpers/assignable-users"),{headers:this.getAuthHeader()});return this.handleResponse(e)}async getMyTeam(){let e=await fetch("".concat(s,"/api/users/helpers/my-team"),{headers:this.getAuthHeader()});return this.handleResponse(e)}async getProjects(e){let t=new URLSearchParams;e&&Object.entries(e).forEach(e=>{let[a,r]=e;void 0!==r&&t.append(a,r.toString())});let a=await fetch("".concat(s,"/api/projects?").concat(t.toString()),{headers:this.getAuthHeader()});return this.handleResponse(a)}async getProjectById(e){try{let t="".concat(s,"/api/projects/").concat(e),a=this.getAuthHeader();console.log("getProjectById - URL:",t),console.log("getProjectById - Headers:",a),console.log("getProjectById - Authorization header:",a.Authorization);let r=await fetch(t,{headers:a});if(console.log("getProjectById - Response status:",r.status),console.log("getProjectById - Response ok:",r.ok),!r.ok){let e=await r.text();throw console.error("getProjectById - Error response:",e),Error("HTTP ".concat(r.status,": ").concat(e))}let c=await this.handleResponse(r);return console.log("getProjectById - Success result:",c),c}catch(e){throw console.error("getProjectById - Error:",e),e}}async createProject(e){let t=await fetch("".concat(s,"/api/projects"),{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateProject(e,t){let a=await fetch("".concat(s,"/api/projects/").concat(e),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(t)});return this.handleResponse(a)}async deleteProject(e){let t=await fetch("".concat(s,"/api/projects/").concat(e),{method:"DELETE",headers:this.getAuthHeader()});return this.handleResponse(t)}async getProjectTasks(e){let t=await fetch("".concat(s,"/api/projects/").concat(e,"/tasks"),{headers:this.getAuthHeader()});return this.handleResponse(t)}async addTeamMember(e,t){let a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"member";c("API Service - addTeamMember called with:",{projectId:e,userId:t,role:a}),c("API Service - URL:","".concat(s,"/api/projects/").concat(e,"/team-members")),c("API Service - Headers:",this.getAuthHeader()),c("API Service - Request Body:",JSON.stringify({userId:t,role:a},null,2));try{let r=await fetch("".concat(s,"/api/projects/").concat(e,"/team-members"),{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify({userId:t,role:a})});if(c("API Service - addTeamMember response status:",r.status),c("API Service - addTeamMember response ok:",r.ok),!r.ok){let e=await r.text();throw o("API Service - addTeamMember error response:",e),Error("HTTP ".concat(r.status,": ").concat(e))}let n=await this.handleResponse(r);return c("API Service - addTeamMember success result:",n),n}catch(e){throw o("API Service - addTeamMember error:",e),e}}async removeTeamMember(e,t){c("API Service - removeTeamMember called with:",{projectId:e,userId:t}),c("API Service - URL:","".concat(s,"/api/projects/").concat(e,"/team-members/").concat(t)),c("API Service - Headers:",this.getAuthHeader());try{let a=await fetch("".concat(s,"/api/projects/").concat(e,"/team-members/").concat(t),{method:"DELETE",headers:this.getAuthHeader()});if(c("API Service - removeTeamMember response status:",a.status),c("API Service - removeTeamMember response ok:",a.ok),!a.ok){let e=await a.text();throw o("API Service - removeTeamMember error response:",e),Error("HTTP ".concat(a.status,": ").concat(e))}let r=await this.handleResponse(a);return c("API Service - removeTeamMember success result:",r),r}catch(e){throw o("API Service - removeTeamMember error:",e),e}}async updateTeamMemberRole(e,t,a){c("API Service - updateTeamMemberRole called with:",{projectId:e,userId:t,role:a}),c("API Service - URL:","".concat(s,"/api/projects/").concat(e,"/team-members/").concat(t)),c("API Service - Headers:",this.getAuthHeader()),c("API Service - Request Body:",JSON.stringify({role:a},null,2));try{let r=await fetch("".concat(s,"/api/projects/").concat(e,"/team-members/").concat(t),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify({role:a})});if(c("API Service - updateTeamMemberRole response status:",r.status),c("API Service - updateTeamMemberRole response ok:",r.ok),!r.ok){let e=await r.text();throw o("API Service - updateTeamMemberRole error response:",e),Error("HTTP ".concat(r.status,": ").concat(e))}let n=await this.handleResponse(r);return c("API Service - updateTeamMemberRole success result:",n),n}catch(e){throw o("API Service - updateTeamMemberRole error:",e),e}}async bulkAddTeamMembers(e,t){c("API Service - bulkAddTeamMembers called with:",{projectId:e,teamMembers:t}),c("API Service - URL:","".concat(s,"/api/projects/").concat(e,"/team-members/bulk")),c("API Service - Headers:",this.getAuthHeader()),c("API Service - Request Body:",JSON.stringify({teamMembers:t},null,2));try{let a=await fetch("".concat(s,"/api/projects/").concat(e,"/team-members/bulk"),{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify({teamMembers:t})});if(c("API Service - bulkAddTeamMembers response status:",a.status),c("API Service - bulkAddTeamMembers response ok:",a.ok),!a.ok){let e=await a.text();throw o("API Service - bulkAddTeamMembers error response:",e),Error("HTTP ".concat(a.status,": ").concat(e))}let r=await this.handleResponse(a);return c("API Service - bulkAddTeamMembers success result:",r),r}catch(e){throw o("API Service - bulkAddTeamMembers error:",e),e}}async addTeamMembersViaProjectUpdate(e,t){c("API Service - addTeamMembersViaProjectUpdate called with:",{projectId:e,userIds:t});try{let a=await this.getProjectById(e);c("API Service - Current project data:",a);let r=a.teamMembers||[];c("API Service - Current teamMembers:",r);let s=r.map(e=>{if(e&&"object"==typeof e){if(e.user&&e.user._id)return e.user._id;else if(e._id)return e._id}return null}).filter(e=>null!==e);c("API Service - Existing team member user IDs:",s);let o=[...new Set([...s,...t])];c("API Service - Updated user IDs:",o);let n=o.map(e=>({user:e,role:"member"})),i={...a,teamMembers:n};c("API Service - Update data:",i);let h=await this.updateProject(e,i);return c("API Service - Project update result:",h),h}catch(e){throw o("API Service - addTeamMembersViaProjectUpdate error:",e),e}}async removeTeamMemberViaProjectUpdate(e,t){c("API Service - removeTeamMemberViaProjectUpdate called with:",{projectId:e,userId:t});try{let a=await this.getProjectById(e);c("API Service - Current project data:",a);let r=a.teamMembers||[];c("API Service - Current teamMembers before removal:",r),c("API Service - Current teamMembers count before removal:",r.length),r.forEach((e,a)=>{let r="string"==typeof e.user?e.user:e.user._id;c("API Service - Team member ".concat(a,":"),{member:e,memberUserId:r,shouldRemove:r===t})});let s=r.filter(e=>{if(e&&"object"==typeof e&&e.user){let a="string"==typeof e.user?e.user:e.user._id,r=a!==t;return c("API Service - Filtering team member: ".concat(a," !== ").concat(t," = ").concat(r)),r}return c("API Service - Keeping item (no user property):",e),!0});if(c("API Service - Updated teamMembers after removal:",s),c("API Service - Updated teamMembers count after removal:",s.length),c("API Service - Removed count:",r.length-s.length),r.length-s.length!=1)throw o("API Service - WARNING: Removed more than one team member!"),Error("Team member removal failed - removed more than one member");let n={...a,teamMembers:s};c("API Service - Update data:",n);let i=await this.updateProject(e,n);return c("API Service - Project update result:",i),i}catch(e){throw o("API Service - removeTeamMemberViaProjectUpdate error:",e),e}}async getTasks(e){try{let t=new URLSearchParams;e&&Object.entries(e).forEach(e=>{let[a,r]=e;void 0!==r&&""!==r&&t.append(a,r)});let a="".concat(s,"/api/tasks").concat(t.toString()?"?".concat(t.toString()):""),r=await fetch(a,{headers:this.getAuthHeader()}),o=await this.handleResponse(r);return c("API Service - getTasks response:",o),Array.isArray(o)?o:[]}catch(e){throw o("API Service - getTasks error:",e),e}}async getTasksByProject(e){try{let t=await fetch("".concat(s,"/api/projects/").concat(e,"/tasks"),{headers:this.getAuthHeader()});return await this.handleResponse(t)}catch(e){throw o("Failed to fetch project tasks:",e),e}}async getTaskById(e){let t=await fetch("".concat(s,"/api/tasks/").concat(e),{headers:this.getAuthHeader()});return this.handleResponse(t)}async createTask(e){c("API Service - createTask called with:",e),c("API Service - URL:","".concat(s,"/api/tasks")),c("API Service - Headers:",this.getAuthHeader()),c("API Service - Request Body:",JSON.stringify(e,null,2));try{let t=await fetch("".concat(s,"/api/tasks"),{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify(e)});if(c("API Service - Response status:",t.status),c("API Service - Response ok:",t.ok),!t.ok){let e=await t.text();throw o("API Service - Error response body:",e),Error("HTTP ".concat(t.status,": ").concat(e))}return this.handleResponse(t)}catch(e){throw o("API Service - Fetch error:",e),e}}async updateTask(e,t){c("API Service - updateTask called with ID:",e),c("API Service - updateTask data:",t),c("API Service - updateTask URL:","".concat(s,"/api/tasks/").concat(e));try{let a=await fetch("".concat(s,"/api/tasks/").concat(e),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(t)});if(c("API Service - updateTask response status:",a.status),c("API Service - updateTask response ok:",a.ok),!a.ok){let e=await a.text();throw o("API Service - updateTask error response:",e),Error("HTTP ".concat(a.status,": ").concat(e))}return this.handleResponse(a)}catch(e){throw o("API Service - updateTask error:",e),e}}async deleteTask(e){let t=await fetch("".concat(s,"/api/tasks/").concat(e),{method:"DELETE",headers:this.getAuthHeader()});return this.handleResponse(t)}async updateTaskStatus(e,t){let a=await fetch("".concat(s,"/api/tasks/").concat(e,"/status"),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify({status:t})});return this.handleResponse(a)}async assignTask(e,t){let a=await fetch("".concat(s,"/api/tasks/").concat(e,"/assign"),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify({assignedTo:t})});return this.handleResponse(a)}async getUserTasks(e){let t=new URLSearchParams;e&&Object.entries(e).forEach(e=>{let[a,r]=e;void 0!==r&&t.append(a,r)});let a=await fetch("".concat(s,"/api/user-tasks?").concat(t.toString()),{headers:this.getAuthHeader()});return this.handleResponse(a)}async createUserTask(e){let t=await fetch("".concat(s,"/api/user-tasks"),{method:"POST",headers:this.getAuthHeader(),body:JSON.stringify(e)});return this.handleResponse(t)}async updateUserTask(e,t){let a=await fetch("".concat(s,"/api/user-tasks/").concat(e),{method:"PUT",headers:this.getAuthHeader(),body:JSON.stringify(t)});return this.handleResponse(a)}async deleteUserTask(e){let t=await fetch("".concat(s,"/api/user-tasks/").concat(e),{method:"DELETE",headers:this.getAuthHeader()});return this.handleResponse(t)}async getDashboardStats(){let e=await fetch("".concat(s,"/api/dashboard"),{headers:this.getAuthHeader()});return this.handleResponse(e)}async getProjectsSummary(){let e=await fetch("".concat(s,"/api/dashboard/projects-summary"),{headers:this.getAuthHeader()});return this.handleResponse(e)}async getTasksSummary(){let e=await fetch("".concat(s,"/api/dashboard/tasks-summary"),{headers:this.getAuthHeader()});return this.handleResponse(e)}async getDashboardSummary(e){try{let t=new URLSearchParams;(null==e?void 0:e.department)&&t.append("department",e.department);let a="".concat(s,"/api/dashboard/summary").concat(t.toString()?"?".concat(t.toString()):""),r=await fetch(a,{headers:this.getAuthHeader()});return await this.handleResponse(r)}catch(e){throw o("Failed to fetch dashboard summary:",e),e}}async getDepartments(){try{let e=await fetch("".concat(s,"/api/dashboard/departments"),{headers:this.getAuthHeader()}),t=await this.handleResponse(e);return Array.isArray(t)?t:[]}catch(e){return o("Failed to fetch departments:",e),[]}}}let i=new n}}]);